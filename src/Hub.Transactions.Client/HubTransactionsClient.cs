// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Hub.Transactions.Client
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public partial class HubTransactionsClient : ServiceClient<HubTransactionsClient>, IHubTransactionsClient
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// Initializes a new instance of the HubTransactionsClient class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public HubTransactionsClient(params DelegatingHandler[] handlers) : base(handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the HubTransactionsClient class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public HubTransactionsClient(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the HubTransactionsClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public HubTransactionsClient(System.Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the HubTransactionsClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public HubTransactionsClient(System.Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            BaseUri = new System.Uri("http://localhost");
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new  List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
        }
        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='groupByBankId'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<PagedResultAPIResponseTimesRow>> GetAPIResponseTimesWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), bool? groupByBankId = default(bool?), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("groupByBankId", groupByBankId);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetAPIResponseTimes", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "APIResponseTimes").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (groupByBankId != null)
            {
                _queryParameters.Add(string.Format("GroupByBankId={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(groupByBankId, SerializationSettings).Trim('"'))));
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<PagedResultAPIResponseTimesRow>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PagedResultAPIResponseTimesRow>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='groupByBankId'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='optionText'>
        /// </param>
        /// <param name='optionValue'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IList<FilterOption>>> GetAPIResponseTimesOptionsWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), bool? groupByBankId = default(bool?), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("groupByBankId", groupByBankId);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("optionText", optionText);
                tracingParameters.Add("optionValue", optionValue);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetAPIResponseTimesOptions", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "APIResponseTimes/Options").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (groupByBankId != null)
            {
                _queryParameters.Add(string.Format("GroupByBankId={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(groupByBankId, SerializationSettings).Trim('"'))));
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (optionText != null)
            {
                _queryParameters.Add(string.Format("OptionText={0}", System.Uri.EscapeDataString(optionText)));
            }
            if (optionValue != null)
            {
                _queryParameters.Add(string.Format("OptionValue={0}", System.Uri.EscapeDataString(optionValue)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IList<FilterOption>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IList<FilterOption>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<PagedResultAuthorisationBreakdownSummaryRow>> GetAuthorisationBreakdownSummaryWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetAuthorisationBreakdownSummary", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "AuthorisationBreakdownSummary").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<PagedResultAuthorisationBreakdownSummaryRow>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PagedResultAuthorisationBreakdownSummaryRow>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='optionText'>
        /// </param>
        /// <param name='optionValue'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IList<FilterOption>>> GetAuthorisationBreakdownSummaryOptionsWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("optionText", optionText);
                tracingParameters.Add("optionValue", optionValue);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetAuthorisationBreakdownSummaryOptions", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "AuthorisationBreakdownSummary/Options").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (optionText != null)
            {
                _queryParameters.Add(string.Format("OptionText={0}", System.Uri.EscapeDataString(optionText)));
            }
            if (optionValue != null)
            {
                _queryParameters.Add(string.Format("OptionValue={0}", System.Uri.EscapeDataString(optionValue)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IList<FilterOption>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IList<FilterOption>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<PagedResultAuthorisationByBINSummaryRow>> GetAuthorisationByBINSummaryWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetAuthorisationByBINSummary", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "AuthorisationByBINSummary").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<PagedResultAuthorisationByBINSummaryRow>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PagedResultAuthorisationByBINSummaryRow>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='optionText'>
        /// </param>
        /// <param name='optionValue'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IList<FilterOption>>> GetAuthorisationByBINSummaryOptionsWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("optionText", optionText);
                tracingParameters.Add("optionValue", optionValue);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetAuthorisationByBINSummaryOptions", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "AuthorisationByBINSummary/Options").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (optionText != null)
            {
                _queryParameters.Add(string.Format("OptionText={0}", System.Uri.EscapeDataString(optionText)));
            }
            if (optionValue != null)
            {
                _queryParameters.Add(string.Format("OptionValue={0}", System.Uri.EscapeDataString(optionValue)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IList<FilterOption>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IList<FilterOption>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='mID'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<PagedResultAuthorisationSummaryRow>> GetAuthorisationSummaryWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), string mID = default(string), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("mID", mID);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetAuthorisationSummary", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "AuthorisationSummary").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (mID != null)
            {
                _queryParameters.Add(string.Format("MID={0}", System.Uri.EscapeDataString(mID)));
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<PagedResultAuthorisationSummaryRow>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PagedResultAuthorisationSummaryRow>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='mID'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='optionText'>
        /// </param>
        /// <param name='optionValue'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IList<FilterOption>>> GetAuthorisationSummaryOptionsWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), string mID = default(string), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("mID", mID);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("optionText", optionText);
                tracingParameters.Add("optionValue", optionValue);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetAuthorisationSummaryOptions", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "AuthorisationSummary/Options").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (mID != null)
            {
                _queryParameters.Add(string.Format("MID={0}", System.Uri.EscapeDataString(mID)));
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (optionText != null)
            {
                _queryParameters.Add(string.Format("OptionText={0}", System.Uri.EscapeDataString(optionText)));
            }
            if (optionValue != null)
            {
                _queryParameters.Add(string.Format("OptionValue={0}", System.Uri.EscapeDataString(optionValue)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IList<FilterOption>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IList<FilterOption>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<PagedResultAuthResponseReasonRow>> GetAuthResponseReasonWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetAuthResponseReason", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "AuthResponseReason").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<PagedResultAuthResponseReasonRow>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PagedResultAuthResponseReasonRow>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='optionText'>
        /// </param>
        /// <param name='optionValue'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IList<FilterOption>>> GetAuthResponseReasonOptionsWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("optionText", optionText);
                tracingParameters.Add("optionValue", optionValue);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetAuthResponseReasonOptions", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "AuthResponseReason/Options").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (optionText != null)
            {
                _queryParameters.Add(string.Format("OptionText={0}", System.Uri.EscapeDataString(optionText)));
            }
            if (optionValue != null)
            {
                _queryParameters.Add(string.Format("OptionValue={0}", System.Uri.EscapeDataString(optionValue)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IList<FilterOption>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IList<FilterOption>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='aPIIds'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<PagedResultBillingSummaryRow>> GetBillingSummaryWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> aPIIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("aPIIds", aPIIds);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetBillingSummary", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "BillingSummary").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (aPIIds != null)
            {
                if (aPIIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("APIIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in aPIIds)
                    {
                        _queryParameters.Add(string.Format("APIIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<PagedResultBillingSummaryRow>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PagedResultBillingSummaryRow>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='aPIIds'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='optionText'>
        /// </param>
        /// <param name='optionValue'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IList<FilterOption>>> GetBillingSummaryOptionsWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> aPIIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("aPIIds", aPIIds);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("optionText", optionText);
                tracingParameters.Add("optionValue", optionValue);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetBillingSummaryOptions", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "BillingSummary/Options").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (aPIIds != null)
            {
                if (aPIIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("APIIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in aPIIds)
                    {
                        _queryParameters.Add(string.Format("APIIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (optionText != null)
            {
                _queryParameters.Add(string.Format("OptionText={0}", System.Uri.EscapeDataString(optionText)));
            }
            if (optionValue != null)
            {
                _queryParameters.Add(string.Format("OptionValue={0}", System.Uri.EscapeDataString(optionValue)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IList<FilterOption>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IList<FilterOption>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='transactionTypes'>
        /// </param>
        /// <param name='currencies'>
        /// </param>
        /// <param name='exchangeCurrencies'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<PagedResultCaptureRefundSummaryRow>> GetCaptureRefundSummaryWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> transactionTypes = default(IList<string>), IList<string> currencies = default(IList<string>), IList<string> exchangeCurrencies = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("transactionTypes", transactionTypes);
                tracingParameters.Add("currencies", currencies);
                tracingParameters.Add("exchangeCurrencies", exchangeCurrencies);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetCaptureRefundSummary", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "CaptureRefundSummary").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (transactionTypes != null)
            {
                if (transactionTypes.Count == 0)
                {
                    _queryParameters.Add(string.Format("TransactionTypes={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in transactionTypes)
                    {
                        _queryParameters.Add(string.Format("TransactionTypes={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (currencies != null)
            {
                if (currencies.Count == 0)
                {
                    _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in currencies)
                    {
                        _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (exchangeCurrencies != null)
            {
                if (exchangeCurrencies.Count == 0)
                {
                    _queryParameters.Add(string.Format("ExchangeCurrencies={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in exchangeCurrencies)
                    {
                        _queryParameters.Add(string.Format("ExchangeCurrencies={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<PagedResultCaptureRefundSummaryRow>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PagedResultCaptureRefundSummaryRow>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='transactionTypes'>
        /// </param>
        /// <param name='currencies'>
        /// </param>
        /// <param name='exchangeCurrencies'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='optionText'>
        /// </param>
        /// <param name='optionValue'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IList<FilterOption>>> GetCaptureRefundSummaryOptionsWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> transactionTypes = default(IList<string>), IList<string> currencies = default(IList<string>), IList<string> exchangeCurrencies = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("transactionTypes", transactionTypes);
                tracingParameters.Add("currencies", currencies);
                tracingParameters.Add("exchangeCurrencies", exchangeCurrencies);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("optionText", optionText);
                tracingParameters.Add("optionValue", optionValue);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetCaptureRefundSummaryOptions", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "CaptureRefundSummary/Options").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (transactionTypes != null)
            {
                if (transactionTypes.Count == 0)
                {
                    _queryParameters.Add(string.Format("TransactionTypes={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in transactionTypes)
                    {
                        _queryParameters.Add(string.Format("TransactionTypes={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (currencies != null)
            {
                if (currencies.Count == 0)
                {
                    _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in currencies)
                    {
                        _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (exchangeCurrencies != null)
            {
                if (exchangeCurrencies.Count == 0)
                {
                    _queryParameters.Add(string.Format("ExchangeCurrencies={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in exchangeCurrencies)
                    {
                        _queryParameters.Add(string.Format("ExchangeCurrencies={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (optionText != null)
            {
                _queryParameters.Add(string.Format("OptionText={0}", System.Uri.EscapeDataString(optionText)));
            }
            if (optionValue != null)
            {
                _queryParameters.Add(string.Format("OptionValue={0}", System.Uri.EscapeDataString(optionValue)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IList<FilterOption>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IList<FilterOption>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<PagedResultCardTypeBreakdownRow>> GetCardTypeBreakdownWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetCardTypeBreakdown", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "CardTypeBreakdown").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<PagedResultCardTypeBreakdownRow>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PagedResultCardTypeBreakdownRow>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='optionText'>
        /// </param>
        /// <param name='optionValue'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IList<FilterOption>>> GetCardTypeBreakdownOptionsWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("optionText", optionText);
                tracingParameters.Add("optionValue", optionValue);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetCardTypeBreakdownOptions", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "CardTypeBreakdown/Options").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (optionText != null)
            {
                _queryParameters.Add(string.Format("OptionText={0}", System.Uri.EscapeDataString(optionText)));
            }
            if (optionValue != null)
            {
                _queryParameters.Add(string.Format("OptionValue={0}", System.Uri.EscapeDataString(optionValue)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IList<FilterOption>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IList<FilterOption>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='iDs'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<PagedResultChargebackDetailsRow>> GetChargebackDetailsWithHttpMessagesAsync(IList<int?> iDs = default(IList<int?>), int? pageSize = default(int?), int? page = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("iDs", iDs);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetChargebackDetails", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "ChargebackDetails").ToString();
            List<string> _queryParameters = new List<string>();
            if (iDs != null)
            {
                if (iDs.Count == 0)
                {
                    _queryParameters.Add(string.Format("IDs={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in iDs)
                    {
                        _queryParameters.Add(string.Format("IDs={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<PagedResultChargebackDetailsRow>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PagedResultChargebackDetailsRow>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<PagedResultDashboardOriginRow>> GetDashboardOriginWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetDashboardOrigin", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "DashboardOrigin").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<PagedResultDashboardOriginRow>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PagedResultDashboardOriginRow>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<PagedResultDashboardPaymentMethodRow>> GetDashboardPaymentMethodWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetDashboardPaymentMethod", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "DashboardPaymentMethod").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<PagedResultDashboardPaymentMethodRow>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PagedResultDashboardPaymentMethodRow>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='transactionTypes'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<PagedResultHubSummaryDetailRow>> GetHubSummaryDetailWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> transactionTypes = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("transactionTypes", transactionTypes);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetHubSummaryDetail", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "HubSummaryDetail").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (transactionTypes != null)
            {
                if (transactionTypes.Count == 0)
                {
                    _queryParameters.Add(string.Format("TransactionTypes={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in transactionTypes)
                    {
                        _queryParameters.Add(string.Format("TransactionTypes={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<PagedResultHubSummaryDetailRow>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PagedResultHubSummaryDetailRow>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='transactionTypes'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='optionText'>
        /// </param>
        /// <param name='optionValue'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IList<FilterOption>>> GetHubSummaryDetailOptionsWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> transactionTypes = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("transactionTypes", transactionTypes);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("optionText", optionText);
                tracingParameters.Add("optionValue", optionValue);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetHubSummaryDetailOptions", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "HubSummaryDetail/Options").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (transactionTypes != null)
            {
                if (transactionTypes.Count == 0)
                {
                    _queryParameters.Add(string.Format("TransactionTypes={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in transactionTypes)
                    {
                        _queryParameters.Add(string.Format("TransactionTypes={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (optionText != null)
            {
                _queryParameters.Add(string.Format("OptionText={0}", System.Uri.EscapeDataString(optionText)));
            }
            if (optionValue != null)
            {
                _queryParameters.Add(string.Format("OptionValue={0}", System.Uri.EscapeDataString(optionValue)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IList<FilterOption>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IList<FilterOption>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<PagedResultPaymentMethodBreakdownRow>> GetPaymentMethodBreakdownWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetPaymentMethodBreakdown", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "PaymentMethodBreakdown").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<PagedResultPaymentMethodBreakdownRow>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PagedResultPaymentMethodBreakdownRow>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='optionText'>
        /// </param>
        /// <param name='optionValue'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IList<FilterOption>>> GetPaymentMethodBreakdownOptionsWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("optionText", optionText);
                tracingParameters.Add("optionValue", optionValue);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetPaymentMethodBreakdownOptions", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "PaymentMethodBreakdown/Options").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (optionText != null)
            {
                _queryParameters.Add(string.Format("OptionText={0}", System.Uri.EscapeDataString(optionText)));
            }
            if (optionValue != null)
            {
                _queryParameters.Add(string.Format("OptionValue={0}", System.Uri.EscapeDataString(optionValue)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IList<FilterOption>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IList<FilterOption>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='iDs'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<PagedResultPointsInstallmentsDetailsRow>> GetPointsInstallmentsDetailsWithHttpMessagesAsync(IList<int?> iDs = default(IList<int?>), int? pageSize = default(int?), int? page = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("iDs", iDs);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetPointsInstallmentsDetails", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "PointsInstallmentsDetails").ToString();
            List<string> _queryParameters = new List<string>();
            if (iDs != null)
            {
                if (iDs.Count == 0)
                {
                    _queryParameters.Add(string.Format("IDs={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in iDs)
                    {
                        _queryParameters.Add(string.Format("IDs={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<PagedResultPointsInstallmentsDetailsRow>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PagedResultPointsInstallmentsDetailsRow>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='transactionTypes'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<PagedResultProductSummaryRow>> GetProductSummaryWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> transactionTypes = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("transactionTypes", transactionTypes);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetProductSummary", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "ProductSummary").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (transactionTypes != null)
            {
                if (transactionTypes.Count == 0)
                {
                    _queryParameters.Add(string.Format("TransactionTypes={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in transactionTypes)
                    {
                        _queryParameters.Add(string.Format("TransactionTypes={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<PagedResultProductSummaryRow>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PagedResultProductSummaryRow>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='transactionTypes'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='optionText'>
        /// </param>
        /// <param name='optionValue'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IList<FilterOption>>> GetProductSummaryOptionsWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> transactionTypes = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("transactionTypes", transactionTypes);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("optionText", optionText);
                tracingParameters.Add("optionValue", optionValue);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetProductSummaryOptions", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "ProductSummary/Options").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (transactionTypes != null)
            {
                if (transactionTypes.Count == 0)
                {
                    _queryParameters.Add(string.Format("TransactionTypes={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in transactionTypes)
                    {
                        _queryParameters.Add(string.Format("TransactionTypes={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (optionText != null)
            {
                _queryParameters.Add(string.Format("OptionText={0}", System.Uri.EscapeDataString(optionText)));
            }
            if (optionValue != null)
            {
                _queryParameters.Add(string.Format("OptionValue={0}", System.Uri.EscapeDataString(optionValue)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IList<FilterOption>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IList<FilterOption>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='currencies'>
        /// </param>
        /// <param name='exchangeCurrencies'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<PagedResultRefundRatesRow>> GetRefundRatesWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> currencies = default(IList<string>), IList<string> exchangeCurrencies = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("currencies", currencies);
                tracingParameters.Add("exchangeCurrencies", exchangeCurrencies);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetRefundRates", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "RefundRates").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (currencies != null)
            {
                if (currencies.Count == 0)
                {
                    _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in currencies)
                    {
                        _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (exchangeCurrencies != null)
            {
                if (exchangeCurrencies.Count == 0)
                {
                    _queryParameters.Add(string.Format("ExchangeCurrencies={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in exchangeCurrencies)
                    {
                        _queryParameters.Add(string.Format("ExchangeCurrencies={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<PagedResultRefundRatesRow>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PagedResultRefundRatesRow>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='currencies'>
        /// </param>
        /// <param name='exchangeCurrencies'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='optionText'>
        /// </param>
        /// <param name='optionValue'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IList<FilterOption>>> GetRefundRatesOptionsWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> currencies = default(IList<string>), IList<string> exchangeCurrencies = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("currencies", currencies);
                tracingParameters.Add("exchangeCurrencies", exchangeCurrencies);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("optionText", optionText);
                tracingParameters.Add("optionValue", optionValue);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetRefundRatesOptions", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "RefundRates/Options").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (currencies != null)
            {
                if (currencies.Count == 0)
                {
                    _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in currencies)
                    {
                        _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (exchangeCurrencies != null)
            {
                if (exchangeCurrencies.Count == 0)
                {
                    _queryParameters.Add(string.Format("ExchangeCurrencies={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in exchangeCurrencies)
                    {
                        _queryParameters.Add(string.Format("ExchangeCurrencies={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (optionText != null)
            {
                _queryParameters.Add(string.Format("OptionText={0}", System.Uri.EscapeDataString(optionText)));
            }
            if (optionValue != null)
            {
                _queryParameters.Add(string.Format("OptionValue={0}", System.Uri.EscapeDataString(optionValue)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IList<FilterOption>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IList<FilterOption>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='iDs'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<PagedResultRFIDetailsRow>> GetRFIDetailsWithHttpMessagesAsync(IList<int?> iDs = default(IList<int?>), int? pageSize = default(int?), int? page = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("iDs", iDs);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetRFIDetails", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "RFIDetails").ToString();
            List<string> _queryParameters = new List<string>();
            if (iDs != null)
            {
                if (iDs.Count == 0)
                {
                    _queryParameters.Add(string.Format("IDs={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in iDs)
                    {
                        _queryParameters.Add(string.Format("IDs={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<PagedResultRFIDetailsRow>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PagedResultRFIDetailsRow>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='transactionTypes'>
        /// </param>
        /// <param name='currencies'>
        /// </param>
        /// <param name='responseCodes'>
        /// </param>
        /// <param name='bIN'>
        /// </param>
        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='merchantTransactionID'>
        /// </param>
        /// <param name='product'>
        /// </param>
        /// <param name='exchangeCurrencies'>
        /// </param>
        /// <param name='emailAddress'>
        /// </param>
        /// <param name='paymentMethods'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<PagedResultRiskDetailRow>> GetRiskDetailWithHttpMessagesAsync(IList<string> transactionTypes = default(IList<string>), IList<string> currencies = default(IList<string>), IList<string> responseCodes = default(IList<string>), string bIN = default(string), IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), string merchantTransactionID = default(string), string product = default(string), IList<string> exchangeCurrencies = default(IList<string>), string emailAddress = default(string), IList<string> paymentMethods = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("transactionTypes", transactionTypes);
                tracingParameters.Add("currencies", currencies);
                tracingParameters.Add("responseCodes", responseCodes);
                tracingParameters.Add("bIN", bIN);
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("merchantTransactionID", merchantTransactionID);
                tracingParameters.Add("product", product);
                tracingParameters.Add("exchangeCurrencies", exchangeCurrencies);
                tracingParameters.Add("emailAddress", emailAddress);
                tracingParameters.Add("paymentMethods", paymentMethods);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetRiskDetail", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "RiskDetail").ToString();
            List<string> _queryParameters = new List<string>();
            if (transactionTypes != null)
            {
                if (transactionTypes.Count == 0)
                {
                    _queryParameters.Add(string.Format("TransactionTypes={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in transactionTypes)
                    {
                        _queryParameters.Add(string.Format("TransactionTypes={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (currencies != null)
            {
                if (currencies.Count == 0)
                {
                    _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in currencies)
                    {
                        _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (responseCodes != null)
            {
                if (responseCodes.Count == 0)
                {
                    _queryParameters.Add(string.Format("ResponseCodes={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in responseCodes)
                    {
                        _queryParameters.Add(string.Format("ResponseCodes={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bIN != null)
            {
                _queryParameters.Add(string.Format("BIN={0}", System.Uri.EscapeDataString(bIN)));
            }
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantTransactionID != null)
            {
                _queryParameters.Add(string.Format("MerchantTransactionID={0}", System.Uri.EscapeDataString(merchantTransactionID)));
            }
            if (product != null)
            {
                _queryParameters.Add(string.Format("Product={0}", System.Uri.EscapeDataString(product)));
            }
            if (exchangeCurrencies != null)
            {
                if (exchangeCurrencies.Count == 0)
                {
                    _queryParameters.Add(string.Format("ExchangeCurrencies={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in exchangeCurrencies)
                    {
                        _queryParameters.Add(string.Format("ExchangeCurrencies={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (emailAddress != null)
            {
                _queryParameters.Add(string.Format("EmailAddress={0}", System.Uri.EscapeDataString(emailAddress)));
            }
            if (paymentMethods != null)
            {
                if (paymentMethods.Count == 0)
                {
                    _queryParameters.Add(string.Format("PaymentMethods={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in paymentMethods)
                    {
                        _queryParameters.Add(string.Format("PaymentMethods={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<PagedResultRiskDetailRow>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PagedResultRiskDetailRow>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='transactionTypes'>
        /// </param>
        /// <param name='currencies'>
        /// </param>
        /// <param name='responseCodes'>
        /// </param>
        /// <param name='bIN'>
        /// </param>
        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='merchantTransactionID'>
        /// </param>
        /// <param name='product'>
        /// </param>
        /// <param name='exchangeCurrencies'>
        /// </param>
        /// <param name='emailAddress'>
        /// </param>
        /// <param name='paymentMethods'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='optionText'>
        /// </param>
        /// <param name='optionValue'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IList<FilterOption>>> GetRiskDetailOptionsWithHttpMessagesAsync(IList<string> transactionTypes = default(IList<string>), IList<string> currencies = default(IList<string>), IList<string> responseCodes = default(IList<string>), string bIN = default(string), IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), string merchantTransactionID = default(string), string product = default(string), IList<string> exchangeCurrencies = default(IList<string>), string emailAddress = default(string), IList<string> paymentMethods = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("transactionTypes", transactionTypes);
                tracingParameters.Add("currencies", currencies);
                tracingParameters.Add("responseCodes", responseCodes);
                tracingParameters.Add("bIN", bIN);
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("merchantTransactionID", merchantTransactionID);
                tracingParameters.Add("product", product);
                tracingParameters.Add("exchangeCurrencies", exchangeCurrencies);
                tracingParameters.Add("emailAddress", emailAddress);
                tracingParameters.Add("paymentMethods", paymentMethods);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("optionText", optionText);
                tracingParameters.Add("optionValue", optionValue);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetRiskDetailOptions", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "RiskDetail/Options").ToString();
            List<string> _queryParameters = new List<string>();
            if (transactionTypes != null)
            {
                if (transactionTypes.Count == 0)
                {
                    _queryParameters.Add(string.Format("TransactionTypes={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in transactionTypes)
                    {
                        _queryParameters.Add(string.Format("TransactionTypes={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (currencies != null)
            {
                if (currencies.Count == 0)
                {
                    _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in currencies)
                    {
                        _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (responseCodes != null)
            {
                if (responseCodes.Count == 0)
                {
                    _queryParameters.Add(string.Format("ResponseCodes={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in responseCodes)
                    {
                        _queryParameters.Add(string.Format("ResponseCodes={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bIN != null)
            {
                _queryParameters.Add(string.Format("BIN={0}", System.Uri.EscapeDataString(bIN)));
            }
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantTransactionID != null)
            {
                _queryParameters.Add(string.Format("MerchantTransactionID={0}", System.Uri.EscapeDataString(merchantTransactionID)));
            }
            if (product != null)
            {
                _queryParameters.Add(string.Format("Product={0}", System.Uri.EscapeDataString(product)));
            }
            if (exchangeCurrencies != null)
            {
                if (exchangeCurrencies.Count == 0)
                {
                    _queryParameters.Add(string.Format("ExchangeCurrencies={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in exchangeCurrencies)
                    {
                        _queryParameters.Add(string.Format("ExchangeCurrencies={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (emailAddress != null)
            {
                _queryParameters.Add(string.Format("EmailAddress={0}", System.Uri.EscapeDataString(emailAddress)));
            }
            if (paymentMethods != null)
            {
                if (paymentMethods.Count == 0)
                {
                    _queryParameters.Add(string.Format("PaymentMethods={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in paymentMethods)
                    {
                        _queryParameters.Add(string.Format("PaymentMethods={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (optionText != null)
            {
                _queryParameters.Add(string.Format("OptionText={0}", System.Uri.EscapeDataString(optionText)));
            }
            if (optionValue != null)
            {
                _queryParameters.Add(string.Format("OptionValue={0}", System.Uri.EscapeDataString(optionValue)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IList<FilterOption>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IList<FilterOption>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<PagedResultRiskSummaryRow>> GetRiskSummaryWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetRiskSummary", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "RiskSummary").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<PagedResultRiskSummaryRow>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PagedResultRiskSummaryRow>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='optionText'>
        /// </param>
        /// <param name='optionValue'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IList<FilterOption>>> GetRiskSummaryOptionsWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("optionText", optionText);
                tracingParameters.Add("optionValue", optionValue);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetRiskSummaryOptions", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "RiskSummary/Options").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (optionText != null)
            {
                _queryParameters.Add(string.Format("OptionText={0}", System.Uri.EscapeDataString(optionText)));
            }
            if (optionValue != null)
            {
                _queryParameters.Add(string.Format("OptionValue={0}", System.Uri.EscapeDataString(optionValue)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IList<FilterOption>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IList<FilterOption>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='iDs'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<PagedResultShippingServiceDetailsRow>> GetShippingServiceDetailsWithHttpMessagesAsync(IList<int?> iDs = default(IList<int?>), int? pageSize = default(int?), int? page = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("iDs", iDs);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetShippingServiceDetails", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "ShippingServiceDetails").ToString();
            List<string> _queryParameters = new List<string>();
            if (iDs != null)
            {
                if (iDs.Count == 0)
                {
                    _queryParameters.Add(string.Format("IDs={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in iDs)
                    {
                        _queryParameters.Add(string.Format("IDs={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<PagedResultShippingServiceDetailsRow>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PagedResultShippingServiceDetailsRow>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='id'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IList<StatementDataRow>>> GetStatementDataWithHttpMessagesAsync(int? id = default(int?), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("id", id);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetStatementData", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "StatementData").ToString();
            List<string> _queryParameters = new List<string>();
            if (id != null)
            {
                _queryParameters.Add(string.Format("ID={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(id, SerializationSettings).Trim('"'))));
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IList<StatementDataRow>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IList<StatementDataRow>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='id'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='optionText'>
        /// </param>
        /// <param name='optionValue'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IList<FilterOption>>> GetStatementDataOptionsWithHttpMessagesAsync(int? id = default(int?), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("id", id);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("optionText", optionText);
                tracingParameters.Add("optionValue", optionValue);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetStatementDataOptions", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "StatementData/Options").ToString();
            List<string> _queryParameters = new List<string>();
            if (id != null)
            {
                _queryParameters.Add(string.Format("ID={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(id, SerializationSettings).Trim('"'))));
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (optionText != null)
            {
                _queryParameters.Add(string.Format("OptionText={0}", System.Uri.EscapeDataString(optionText)));
            }
            if (optionValue != null)
            {
                _queryParameters.Add(string.Format("OptionValue={0}", System.Uri.EscapeDataString(optionValue)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IList<FilterOption>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IList<FilterOption>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='key'>
        /// </param>
        /// <param name='type'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IList<StatementListRow>>> GetStatementListWithHttpMessagesAsync(string key = default(string), string type = default(string), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("key", key);
                tracingParameters.Add("type", type);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetStatementList", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "StatementList").ToString();
            List<string> _queryParameters = new List<string>();
            if (key != null)
            {
                _queryParameters.Add(string.Format("key={0}", System.Uri.EscapeDataString(key)));
            }
            if (type != null)
            {
                _queryParameters.Add(string.Format("type={0}", System.Uri.EscapeDataString(type)));
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IList<StatementListRow>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IList<StatementListRow>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='key'>
        /// </param>
        /// <param name='type'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='optionText'>
        /// </param>
        /// <param name='optionValue'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IList<FilterOption>>> GetStatementListOptionsWithHttpMessagesAsync(string key = default(string), string type = default(string), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("key", key);
                tracingParameters.Add("type", type);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("optionText", optionText);
                tracingParameters.Add("optionValue", optionValue);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetStatementListOptions", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "StatementList/Options").ToString();
            List<string> _queryParameters = new List<string>();
            if (key != null)
            {
                _queryParameters.Add(string.Format("key={0}", System.Uri.EscapeDataString(key)));
            }
            if (type != null)
            {
                _queryParameters.Add(string.Format("type={0}", System.Uri.EscapeDataString(type)));
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (optionText != null)
            {
                _queryParameters.Add(string.Format("OptionText={0}", System.Uri.EscapeDataString(optionText)));
            }
            if (optionValue != null)
            {
                _queryParameters.Add(string.Format("OptionValue={0}", System.Uri.EscapeDataString(optionValue)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IList<FilterOption>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IList<FilterOption>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='iDs'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<PagedResultThreeDSecureDetailsRow>> GetThreeDSecureDetailsWithHttpMessagesAsync(IList<int?> iDs = default(IList<int?>), int? pageSize = default(int?), int? page = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("iDs", iDs);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetThreeDSecureDetails", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "ThreeDSecureDetails").ToString();
            List<string> _queryParameters = new List<string>();
            if (iDs != null)
            {
                if (iDs.Count == 0)
                {
                    _queryParameters.Add(string.Format("IDs={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in iDs)
                    {
                        _queryParameters.Add(string.Format("IDs={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<PagedResultThreeDSecureDetailsRow>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PagedResultThreeDSecureDetailsRow>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='mID'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<PagedResultTop3MerchantsByTypeRow>> GetTop3MerchantsByTypeWithHttpMessagesAsync(string mID = default(string), int? pageSize = default(int?), int? page = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("mID", mID);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetTop3MerchantsByType", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "Top3MerchantsByType").ToString();
            List<string> _queryParameters = new List<string>();
            if (mID != null)
            {
                _queryParameters.Add(string.Format("MID={0}", System.Uri.EscapeDataString(mID)));
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<PagedResultTop3MerchantsByTypeRow>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PagedResultTop3MerchantsByTypeRow>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='mID'>
        /// </param>
        /// <param name='country'>
        /// </param>
        /// <param name='paymentMethod'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<PagedResultTransactionByCountrySummaryRow>> GetTransactionByCountrySummaryWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), string mID = default(string), string country = default(string), string paymentMethod = default(string), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("mID", mID);
                tracingParameters.Add("country", country);
                tracingParameters.Add("paymentMethod", paymentMethod);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetTransactionByCountrySummary", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "TransactionByCountrySummary").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (mID != null)
            {
                _queryParameters.Add(string.Format("MID={0}", System.Uri.EscapeDataString(mID)));
            }
            if (country != null)
            {
                _queryParameters.Add(string.Format("Country={0}", System.Uri.EscapeDataString(country)));
            }
            if (paymentMethod != null)
            {
                _queryParameters.Add(string.Format("PaymentMethod={0}", System.Uri.EscapeDataString(paymentMethod)));
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<PagedResultTransactionByCountrySummaryRow>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PagedResultTransactionByCountrySummaryRow>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='mID'>
        /// </param>
        /// <param name='country'>
        /// </param>
        /// <param name='paymentMethod'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='optionText'>
        /// </param>
        /// <param name='optionValue'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IList<FilterOption>>> GetTransactionByCountrySummaryOptionsWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), string mID = default(string), string country = default(string), string paymentMethod = default(string), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("mID", mID);
                tracingParameters.Add("country", country);
                tracingParameters.Add("paymentMethod", paymentMethod);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("optionText", optionText);
                tracingParameters.Add("optionValue", optionValue);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetTransactionByCountrySummaryOptions", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "TransactionByCountrySummary/Options").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (mID != null)
            {
                _queryParameters.Add(string.Format("MID={0}", System.Uri.EscapeDataString(mID)));
            }
            if (country != null)
            {
                _queryParameters.Add(string.Format("Country={0}", System.Uri.EscapeDataString(country)));
            }
            if (paymentMethod != null)
            {
                _queryParameters.Add(string.Format("PaymentMethod={0}", System.Uri.EscapeDataString(paymentMethod)));
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (optionText != null)
            {
                _queryParameters.Add(string.Format("OptionText={0}", System.Uri.EscapeDataString(optionText)));
            }
            if (optionValue != null)
            {
                _queryParameters.Add(string.Format("OptionValue={0}", System.Uri.EscapeDataString(optionValue)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IList<FilterOption>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IList<FilterOption>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='currencies'>
        /// </param>
        /// <param name='transactionTypes'>
        /// </param>
        /// <param name='responseCodes'>
        /// </param>
        /// <param name='merchantTransactionID'>
        /// </param>
        /// <param name='product'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<PagedResultTransactionBySettlementDateRow>> GetTransactionBySettlementDateWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> currencies = default(IList<string>), IList<string> transactionTypes = default(IList<string>), IList<string> responseCodes = default(IList<string>), string merchantTransactionID = default(string), string product = default(string), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("currencies", currencies);
                tracingParameters.Add("transactionTypes", transactionTypes);
                tracingParameters.Add("responseCodes", responseCodes);
                tracingParameters.Add("merchantTransactionID", merchantTransactionID);
                tracingParameters.Add("product", product);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetTransactionBySettlementDate", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "TransactionBySettlementDate").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (currencies != null)
            {
                if (currencies.Count == 0)
                {
                    _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in currencies)
                    {
                        _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (transactionTypes != null)
            {
                if (transactionTypes.Count == 0)
                {
                    _queryParameters.Add(string.Format("TransactionTypes={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in transactionTypes)
                    {
                        _queryParameters.Add(string.Format("TransactionTypes={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (responseCodes != null)
            {
                if (responseCodes.Count == 0)
                {
                    _queryParameters.Add(string.Format("ResponseCodes={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in responseCodes)
                    {
                        _queryParameters.Add(string.Format("ResponseCodes={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantTransactionID != null)
            {
                _queryParameters.Add(string.Format("MerchantTransactionID={0}", System.Uri.EscapeDataString(merchantTransactionID)));
            }
            if (product != null)
            {
                _queryParameters.Add(string.Format("Product={0}", System.Uri.EscapeDataString(product)));
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<PagedResultTransactionBySettlementDateRow>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PagedResultTransactionBySettlementDateRow>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='currencies'>
        /// </param>
        /// <param name='transactionTypes'>
        /// </param>
        /// <param name='responseCodes'>
        /// </param>
        /// <param name='merchantTransactionID'>
        /// </param>
        /// <param name='product'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='optionText'>
        /// </param>
        /// <param name='optionValue'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IList<FilterOption>>> GetTransactionBySettlementDateOptionsWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> currencies = default(IList<string>), IList<string> transactionTypes = default(IList<string>), IList<string> responseCodes = default(IList<string>), string merchantTransactionID = default(string), string product = default(string), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("currencies", currencies);
                tracingParameters.Add("transactionTypes", transactionTypes);
                tracingParameters.Add("responseCodes", responseCodes);
                tracingParameters.Add("merchantTransactionID", merchantTransactionID);
                tracingParameters.Add("product", product);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("optionText", optionText);
                tracingParameters.Add("optionValue", optionValue);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetTransactionBySettlementDateOptions", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "TransactionBySettlementDate/Options").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (currencies != null)
            {
                if (currencies.Count == 0)
                {
                    _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in currencies)
                    {
                        _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (transactionTypes != null)
            {
                if (transactionTypes.Count == 0)
                {
                    _queryParameters.Add(string.Format("TransactionTypes={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in transactionTypes)
                    {
                        _queryParameters.Add(string.Format("TransactionTypes={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (responseCodes != null)
            {
                if (responseCodes.Count == 0)
                {
                    _queryParameters.Add(string.Format("ResponseCodes={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in responseCodes)
                    {
                        _queryParameters.Add(string.Format("ResponseCodes={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantTransactionID != null)
            {
                _queryParameters.Add(string.Format("MerchantTransactionID={0}", System.Uri.EscapeDataString(merchantTransactionID)));
            }
            if (product != null)
            {
                _queryParameters.Add(string.Format("Product={0}", System.Uri.EscapeDataString(product)));
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (optionText != null)
            {
                _queryParameters.Add(string.Format("OptionText={0}", System.Uri.EscapeDataString(optionText)));
            }
            if (optionValue != null)
            {
                _queryParameters.Add(string.Format("OptionValue={0}", System.Uri.EscapeDataString(optionValue)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IList<FilterOption>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IList<FilterOption>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='currencies'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<PagedResultTransactionBySettlementSummaryRow>> GetTransactionBySettlementSummaryWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> currencies = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("currencies", currencies);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetTransactionBySettlementSummary", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "TransactionBySettlementSummary").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (currencies != null)
            {
                if (currencies.Count == 0)
                {
                    _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in currencies)
                    {
                        _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<PagedResultTransactionBySettlementSummaryRow>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PagedResultTransactionBySettlementSummaryRow>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='currencies'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='optionText'>
        /// </param>
        /// <param name='optionValue'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IList<FilterOption>>> GetTransactionBySettlementSummaryOptionsWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> currencies = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("currencies", currencies);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("optionText", optionText);
                tracingParameters.Add("optionValue", optionValue);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetTransactionBySettlementSummaryOptions", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "TransactionBySettlementSummary/Options").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (currencies != null)
            {
                if (currencies.Count == 0)
                {
                    _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in currencies)
                    {
                        _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (optionText != null)
            {
                _queryParameters.Add(string.Format("OptionText={0}", System.Uri.EscapeDataString(optionText)));
            }
            if (optionValue != null)
            {
                _queryParameters.Add(string.Format("OptionValue={0}", System.Uri.EscapeDataString(optionValue)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IList<FilterOption>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IList<FilterOption>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='mID'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<PagedResultTransactionChartRow>> GetTransactionChartWithHttpMessagesAsync(string mID = default(string), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("mID", mID);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetTransactionChart", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "TransactionChart").ToString();
            List<string> _queryParameters = new List<string>();
            if (mID != null)
            {
                _queryParameters.Add(string.Format("MID={0}", System.Uri.EscapeDataString(mID)));
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<PagedResultTransactionChartRow>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PagedResultTransactionChartRow>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='id'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IList<TransactionDetailsRow>>> GetTransactionDetailsWithHttpMessagesAsync(int? id = default(int?), double? timeZoneOffset = default(double?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("id", id);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetTransactionDetails", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "TransactionDetails").ToString();
            List<string> _queryParameters = new List<string>();
            if (id != null)
            {
                _queryParameters.Add(string.Format("ID={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(id, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IList<TransactionDetailsRow>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IList<TransactionDetailsRow>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='iDs'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IList<TransactionManagementResultsRow>>> GetTransactionManagementResultsWithHttpMessagesAsync(IList<int?> iDs = default(IList<int?>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("iDs", iDs);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetTransactionManagementResults", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "TransactionManagementResults").ToString();
            List<string> _queryParameters = new List<string>();
            if (iDs != null)
            {
                if (iDs.Count == 0)
                {
                    _queryParameters.Add(string.Format("IDs={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in iDs)
                    {
                        _queryParameters.Add(string.Format("IDs={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IList<TransactionManagementResultsRow>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IList<TransactionManagementResultsRow>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='transactionTypes'>
        /// </param>
        /// <param name='currencies'>
        /// </param>
        /// <param name='amountFrom'>
        /// </param>
        /// <param name='amountTo'>
        /// </param>
        /// <param name='accountHolder'>
        /// </param>
        /// <param name='responseCodes'>
        /// </param>
        /// <param name='bIN'>
        /// </param>
        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='aPIIDs'>
        /// </param>
        /// <param name='merchantTransactionID'>
        /// </param>
        /// <param name='providerTransactionNumber'>
        /// </param>
        /// <param name='providerResponseCodes'>
        /// </param>
        /// <param name='preApprovalStatus'>
        /// </param>
        /// <param name='exchangeCurrencies'>
        /// </param>
        /// <param name='emailAddress'>
        /// </param>
        /// <param name='paymentMethods'>
        /// </param>
        /// <param name='settlementDateFrom'>
        /// </param>
        /// <param name='settlementDateTo'>
        /// </param>
        /// <param name='transactionSources'>
        /// </param>
        /// <param name='cardLastFourDigits'>
        /// </param>
        /// <param name='cardTypes'>
        /// </param>
        /// <param name='userID'>
        /// </param>
        /// <param name='uIUserID'>
        /// </param>
        /// <param name='bankMerchantID'>
        /// </param>
        /// <param name='token'>
        /// </param>
        /// <param name='iPAddress'>
        /// </param>
        /// <param name='terminalID'>
        /// </param>
        /// <param name='paymentID'>
        /// </param>
        /// <param name='bankAuthID'>
        /// </param>
        /// <param name='acquirer'>
        /// </param>
        /// <param name='originalSettlementDateFrom'>
        /// </param>
        /// <param name='originalSettlementDateTo'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<PagedResultTransactionsRow>> GetTransactionsWithHttpMessagesAsync(IList<string> transactionTypes = default(IList<string>), IList<string> currencies = default(IList<string>), double? amountFrom = default(double?), double? amountTo = default(double?), string accountHolder = default(string), IList<string> responseCodes = default(IList<string>), string bIN = default(string), IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> aPIIDs = default(IList<string>), string merchantTransactionID = default(string), string providerTransactionNumber = default(string), IList<string> providerResponseCodes = default(IList<string>), string preApprovalStatus = default(string), IList<string> exchangeCurrencies = default(IList<string>), string emailAddress = default(string), IList<string> paymentMethods = default(IList<string>), System.DateTime? settlementDateFrom = default(System.DateTime?), System.DateTime? settlementDateTo = default(System.DateTime?), IList<string> transactionSources = default(IList<string>), string cardLastFourDigits = default(string), IList<string> cardTypes = default(IList<string>), string userID = default(string), string uIUserID = default(string), string bankMerchantID = default(string), string token = default(string), string iPAddress = default(string), string terminalID = default(string), string paymentID = default(string), string bankAuthID = default(string), string acquirer = default(string), System.DateTime? originalSettlementDateFrom = default(System.DateTime?), System.DateTime? originalSettlementDateTo = default(System.DateTime?), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("transactionTypes", transactionTypes);
                tracingParameters.Add("currencies", currencies);
                tracingParameters.Add("amountFrom", amountFrom);
                tracingParameters.Add("amountTo", amountTo);
                tracingParameters.Add("accountHolder", accountHolder);
                tracingParameters.Add("responseCodes", responseCodes);
                tracingParameters.Add("bIN", bIN);
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("aPIIDs", aPIIDs);
                tracingParameters.Add("merchantTransactionID", merchantTransactionID);
                tracingParameters.Add("providerTransactionNumber", providerTransactionNumber);
                tracingParameters.Add("providerResponseCodes", providerResponseCodes);
                tracingParameters.Add("preApprovalStatus", preApprovalStatus);
                tracingParameters.Add("exchangeCurrencies", exchangeCurrencies);
                tracingParameters.Add("emailAddress", emailAddress);
                tracingParameters.Add("paymentMethods", paymentMethods);
                tracingParameters.Add("settlementDateFrom", settlementDateFrom);
                tracingParameters.Add("settlementDateTo", settlementDateTo);
                tracingParameters.Add("transactionSources", transactionSources);
                tracingParameters.Add("cardLastFourDigits", cardLastFourDigits);
                tracingParameters.Add("cardTypes", cardTypes);
                tracingParameters.Add("userID", userID);
                tracingParameters.Add("uIUserID", uIUserID);
                tracingParameters.Add("bankMerchantID", bankMerchantID);
                tracingParameters.Add("token", token);
                tracingParameters.Add("iPAddress", iPAddress);
                tracingParameters.Add("terminalID", terminalID);
                tracingParameters.Add("paymentID", paymentID);
                tracingParameters.Add("bankAuthID", bankAuthID);
                tracingParameters.Add("acquirer", acquirer);
                tracingParameters.Add("originalSettlementDateFrom", originalSettlementDateFrom);
                tracingParameters.Add("originalSettlementDateTo", originalSettlementDateTo);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetTransactions", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "Transactions").ToString();
            List<string> _queryParameters = new List<string>();
            if (transactionTypes != null)
            {
                if (transactionTypes.Count == 0)
                {
                    _queryParameters.Add(string.Format("TransactionTypes={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in transactionTypes)
                    {
                        _queryParameters.Add(string.Format("TransactionTypes={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (currencies != null)
            {
                if (currencies.Count == 0)
                {
                    _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in currencies)
                    {
                        _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (amountFrom != null)
            {
                _queryParameters.Add(string.Format("AmountFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(amountFrom, SerializationSettings).Trim('"'))));
            }
            if (amountTo != null)
            {
                _queryParameters.Add(string.Format("AmountTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(amountTo, SerializationSettings).Trim('"'))));
            }
            if (accountHolder != null)
            {
                _queryParameters.Add(string.Format("AccountHolder={0}", System.Uri.EscapeDataString(accountHolder)));
            }
            if (responseCodes != null)
            {
                if (responseCodes.Count == 0)
                {
                    _queryParameters.Add(string.Format("ResponseCodes={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in responseCodes)
                    {
                        _queryParameters.Add(string.Format("ResponseCodes={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bIN != null)
            {
                _queryParameters.Add(string.Format("BIN={0}", System.Uri.EscapeDataString(bIN)));
            }
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (aPIIDs != null)
            {
                if (aPIIDs.Count == 0)
                {
                    _queryParameters.Add(string.Format("APIIDs={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in aPIIDs)
                    {
                        _queryParameters.Add(string.Format("APIIDs={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantTransactionID != null)
            {
                _queryParameters.Add(string.Format("MerchantTransactionID={0}", System.Uri.EscapeDataString(merchantTransactionID)));
            }
            if (providerTransactionNumber != null)
            {
                _queryParameters.Add(string.Format("ProviderTransactionNumber={0}", System.Uri.EscapeDataString(providerTransactionNumber)));
            }
            if (providerResponseCodes != null)
            {
                if (providerResponseCodes.Count == 0)
                {
                    _queryParameters.Add(string.Format("ProviderResponseCodes={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in providerResponseCodes)
                    {
                        _queryParameters.Add(string.Format("ProviderResponseCodes={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (preApprovalStatus != null)
            {
                _queryParameters.Add(string.Format("PreApprovalStatus={0}", System.Uri.EscapeDataString(preApprovalStatus)));
            }
            if (exchangeCurrencies != null)
            {
                if (exchangeCurrencies.Count == 0)
                {
                    _queryParameters.Add(string.Format("ExchangeCurrencies={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in exchangeCurrencies)
                    {
                        _queryParameters.Add(string.Format("ExchangeCurrencies={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (emailAddress != null)
            {
                _queryParameters.Add(string.Format("EmailAddress={0}", System.Uri.EscapeDataString(emailAddress)));
            }
            if (paymentMethods != null)
            {
                if (paymentMethods.Count == 0)
                {
                    _queryParameters.Add(string.Format("PaymentMethods={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in paymentMethods)
                    {
                        _queryParameters.Add(string.Format("PaymentMethods={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (settlementDateFrom != null)
            {
                _queryParameters.Add(string.Format("SettlementDateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(settlementDateFrom, SerializationSettings).Trim('"'))));
            }
            if (settlementDateTo != null)
            {
                _queryParameters.Add(string.Format("SettlementDateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(settlementDateTo, SerializationSettings).Trim('"'))));
            }
            if (transactionSources != null)
            {
                if (transactionSources.Count == 0)
                {
                    _queryParameters.Add(string.Format("TransactionSources={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in transactionSources)
                    {
                        _queryParameters.Add(string.Format("TransactionSources={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (cardLastFourDigits != null)
            {
                _queryParameters.Add(string.Format("CardLastFourDigits={0}", System.Uri.EscapeDataString(cardLastFourDigits)));
            }
            if (cardTypes != null)
            {
                if (cardTypes.Count == 0)
                {
                    _queryParameters.Add(string.Format("CardTypes={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in cardTypes)
                    {
                        _queryParameters.Add(string.Format("CardTypes={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (userID != null)
            {
                _queryParameters.Add(string.Format("UserID={0}", System.Uri.EscapeDataString(userID)));
            }
            if (uIUserID != null)
            {
                _queryParameters.Add(string.Format("UIUserID={0}", System.Uri.EscapeDataString(uIUserID)));
            }
            if (bankMerchantID != null)
            {
                _queryParameters.Add(string.Format("BankMerchantID={0}", System.Uri.EscapeDataString(bankMerchantID)));
            }
            if (token != null)
            {
                _queryParameters.Add(string.Format("Token={0}", System.Uri.EscapeDataString(token)));
            }
            if (iPAddress != null)
            {
                _queryParameters.Add(string.Format("IPAddress={0}", System.Uri.EscapeDataString(iPAddress)));
            }
            if (terminalID != null)
            {
                _queryParameters.Add(string.Format("TerminalID={0}", System.Uri.EscapeDataString(terminalID)));
            }
            if (paymentID != null)
            {
                _queryParameters.Add(string.Format("PaymentID={0}", System.Uri.EscapeDataString(paymentID)));
            }
            if (bankAuthID != null)
            {
                _queryParameters.Add(string.Format("BankAuthID={0}", System.Uri.EscapeDataString(bankAuthID)));
            }
            if (acquirer != null)
            {
                _queryParameters.Add(string.Format("Acquirer={0}", System.Uri.EscapeDataString(acquirer)));
            }
            if (originalSettlementDateFrom != null)
            {
                _queryParameters.Add(string.Format("OriginalSettlementDateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(originalSettlementDateFrom, SerializationSettings).Trim('"'))));
            }
            if (originalSettlementDateTo != null)
            {
                _queryParameters.Add(string.Format("OriginalSettlementDateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(originalSettlementDateTo, SerializationSettings).Trim('"'))));
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<PagedResultTransactionsRow>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PagedResultTransactionsRow>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='transactionTypes'>
        /// </param>
        /// <param name='currencies'>
        /// </param>
        /// <param name='amountFrom'>
        /// </param>
        /// <param name='amountTo'>
        /// </param>
        /// <param name='accountHolder'>
        /// </param>
        /// <param name='responseCodes'>
        /// </param>
        /// <param name='bIN'>
        /// </param>
        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='aPIIDs'>
        /// </param>
        /// <param name='merchantTransactionID'>
        /// </param>
        /// <param name='providerTransactionNumber'>
        /// </param>
        /// <param name='providerResponseCodes'>
        /// </param>
        /// <param name='preApprovalStatus'>
        /// </param>
        /// <param name='exchangeCurrencies'>
        /// </param>
        /// <param name='emailAddress'>
        /// </param>
        /// <param name='paymentMethods'>
        /// </param>
        /// <param name='settlementDateFrom'>
        /// </param>
        /// <param name='settlementDateTo'>
        /// </param>
        /// <param name='transactionSources'>
        /// </param>
        /// <param name='cardLastFourDigits'>
        /// </param>
        /// <param name='cardTypes'>
        /// </param>
        /// <param name='userID'>
        /// </param>
        /// <param name='uIUserID'>
        /// </param>
        /// <param name='bankMerchantID'>
        /// </param>
        /// <param name='token'>
        /// </param>
        /// <param name='iPAddress'>
        /// </param>
        /// <param name='terminalID'>
        /// </param>
        /// <param name='paymentID'>
        /// </param>
        /// <param name='bankAuthID'>
        /// </param>
        /// <param name='acquirer'>
        /// </param>
        /// <param name='originalSettlementDateFrom'>
        /// </param>
        /// <param name='originalSettlementDateTo'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='optionText'>
        /// </param>
        /// <param name='optionValue'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IList<FilterOption>>> GetTransactionsOptionsWithHttpMessagesAsync(IList<string> transactionTypes = default(IList<string>), IList<string> currencies = default(IList<string>), double? amountFrom = default(double?), double? amountTo = default(double?), string accountHolder = default(string), IList<string> responseCodes = default(IList<string>), string bIN = default(string), IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> aPIIDs = default(IList<string>), string merchantTransactionID = default(string), string providerTransactionNumber = default(string), IList<string> providerResponseCodes = default(IList<string>), string preApprovalStatus = default(string), IList<string> exchangeCurrencies = default(IList<string>), string emailAddress = default(string), IList<string> paymentMethods = default(IList<string>), System.DateTime? settlementDateFrom = default(System.DateTime?), System.DateTime? settlementDateTo = default(System.DateTime?), IList<string> transactionSources = default(IList<string>), string cardLastFourDigits = default(string), IList<string> cardTypes = default(IList<string>), string userID = default(string), string uIUserID = default(string), string bankMerchantID = default(string), string token = default(string), string iPAddress = default(string), string terminalID = default(string), string paymentID = default(string), string bankAuthID = default(string), string acquirer = default(string), System.DateTime? originalSettlementDateFrom = default(System.DateTime?), System.DateTime? originalSettlementDateTo = default(System.DateTime?), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("transactionTypes", transactionTypes);
                tracingParameters.Add("currencies", currencies);
                tracingParameters.Add("amountFrom", amountFrom);
                tracingParameters.Add("amountTo", amountTo);
                tracingParameters.Add("accountHolder", accountHolder);
                tracingParameters.Add("responseCodes", responseCodes);
                tracingParameters.Add("bIN", bIN);
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("aPIIDs", aPIIDs);
                tracingParameters.Add("merchantTransactionID", merchantTransactionID);
                tracingParameters.Add("providerTransactionNumber", providerTransactionNumber);
                tracingParameters.Add("providerResponseCodes", providerResponseCodes);
                tracingParameters.Add("preApprovalStatus", preApprovalStatus);
                tracingParameters.Add("exchangeCurrencies", exchangeCurrencies);
                tracingParameters.Add("emailAddress", emailAddress);
                tracingParameters.Add("paymentMethods", paymentMethods);
                tracingParameters.Add("settlementDateFrom", settlementDateFrom);
                tracingParameters.Add("settlementDateTo", settlementDateTo);
                tracingParameters.Add("transactionSources", transactionSources);
                tracingParameters.Add("cardLastFourDigits", cardLastFourDigits);
                tracingParameters.Add("cardTypes", cardTypes);
                tracingParameters.Add("userID", userID);
                tracingParameters.Add("uIUserID", uIUserID);
                tracingParameters.Add("bankMerchantID", bankMerchantID);
                tracingParameters.Add("token", token);
                tracingParameters.Add("iPAddress", iPAddress);
                tracingParameters.Add("terminalID", terminalID);
                tracingParameters.Add("paymentID", paymentID);
                tracingParameters.Add("bankAuthID", bankAuthID);
                tracingParameters.Add("acquirer", acquirer);
                tracingParameters.Add("originalSettlementDateFrom", originalSettlementDateFrom);
                tracingParameters.Add("originalSettlementDateTo", originalSettlementDateTo);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("optionText", optionText);
                tracingParameters.Add("optionValue", optionValue);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetTransactionsOptions", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "Transactions/Options").ToString();
            List<string> _queryParameters = new List<string>();
            if (transactionTypes != null)
            {
                if (transactionTypes.Count == 0)
                {
                    _queryParameters.Add(string.Format("TransactionTypes={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in transactionTypes)
                    {
                        _queryParameters.Add(string.Format("TransactionTypes={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (currencies != null)
            {
                if (currencies.Count == 0)
                {
                    _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in currencies)
                    {
                        _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (amountFrom != null)
            {
                _queryParameters.Add(string.Format("AmountFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(amountFrom, SerializationSettings).Trim('"'))));
            }
            if (amountTo != null)
            {
                _queryParameters.Add(string.Format("AmountTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(amountTo, SerializationSettings).Trim('"'))));
            }
            if (accountHolder != null)
            {
                _queryParameters.Add(string.Format("AccountHolder={0}", System.Uri.EscapeDataString(accountHolder)));
            }
            if (responseCodes != null)
            {
                if (responseCodes.Count == 0)
                {
                    _queryParameters.Add(string.Format("ResponseCodes={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in responseCodes)
                    {
                        _queryParameters.Add(string.Format("ResponseCodes={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bIN != null)
            {
                _queryParameters.Add(string.Format("BIN={0}", System.Uri.EscapeDataString(bIN)));
            }
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (aPIIDs != null)
            {
                if (aPIIDs.Count == 0)
                {
                    _queryParameters.Add(string.Format("APIIDs={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in aPIIDs)
                    {
                        _queryParameters.Add(string.Format("APIIDs={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantTransactionID != null)
            {
                _queryParameters.Add(string.Format("MerchantTransactionID={0}", System.Uri.EscapeDataString(merchantTransactionID)));
            }
            if (providerTransactionNumber != null)
            {
                _queryParameters.Add(string.Format("ProviderTransactionNumber={0}", System.Uri.EscapeDataString(providerTransactionNumber)));
            }
            if (providerResponseCodes != null)
            {
                if (providerResponseCodes.Count == 0)
                {
                    _queryParameters.Add(string.Format("ProviderResponseCodes={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in providerResponseCodes)
                    {
                        _queryParameters.Add(string.Format("ProviderResponseCodes={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (preApprovalStatus != null)
            {
                _queryParameters.Add(string.Format("PreApprovalStatus={0}", System.Uri.EscapeDataString(preApprovalStatus)));
            }
            if (exchangeCurrencies != null)
            {
                if (exchangeCurrencies.Count == 0)
                {
                    _queryParameters.Add(string.Format("ExchangeCurrencies={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in exchangeCurrencies)
                    {
                        _queryParameters.Add(string.Format("ExchangeCurrencies={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (emailAddress != null)
            {
                _queryParameters.Add(string.Format("EmailAddress={0}", System.Uri.EscapeDataString(emailAddress)));
            }
            if (paymentMethods != null)
            {
                if (paymentMethods.Count == 0)
                {
                    _queryParameters.Add(string.Format("PaymentMethods={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in paymentMethods)
                    {
                        _queryParameters.Add(string.Format("PaymentMethods={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (settlementDateFrom != null)
            {
                _queryParameters.Add(string.Format("SettlementDateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(settlementDateFrom, SerializationSettings).Trim('"'))));
            }
            if (settlementDateTo != null)
            {
                _queryParameters.Add(string.Format("SettlementDateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(settlementDateTo, SerializationSettings).Trim('"'))));
            }
            if (transactionSources != null)
            {
                if (transactionSources.Count == 0)
                {
                    _queryParameters.Add(string.Format("TransactionSources={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in transactionSources)
                    {
                        _queryParameters.Add(string.Format("TransactionSources={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (cardLastFourDigits != null)
            {
                _queryParameters.Add(string.Format("CardLastFourDigits={0}", System.Uri.EscapeDataString(cardLastFourDigits)));
            }
            if (cardTypes != null)
            {
                if (cardTypes.Count == 0)
                {
                    _queryParameters.Add(string.Format("CardTypes={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in cardTypes)
                    {
                        _queryParameters.Add(string.Format("CardTypes={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (userID != null)
            {
                _queryParameters.Add(string.Format("UserID={0}", System.Uri.EscapeDataString(userID)));
            }
            if (uIUserID != null)
            {
                _queryParameters.Add(string.Format("UIUserID={0}", System.Uri.EscapeDataString(uIUserID)));
            }
            if (bankMerchantID != null)
            {
                _queryParameters.Add(string.Format("BankMerchantID={0}", System.Uri.EscapeDataString(bankMerchantID)));
            }
            if (token != null)
            {
                _queryParameters.Add(string.Format("Token={0}", System.Uri.EscapeDataString(token)));
            }
            if (iPAddress != null)
            {
                _queryParameters.Add(string.Format("IPAddress={0}", System.Uri.EscapeDataString(iPAddress)));
            }
            if (terminalID != null)
            {
                _queryParameters.Add(string.Format("TerminalID={0}", System.Uri.EscapeDataString(terminalID)));
            }
            if (paymentID != null)
            {
                _queryParameters.Add(string.Format("PaymentID={0}", System.Uri.EscapeDataString(paymentID)));
            }
            if (bankAuthID != null)
            {
                _queryParameters.Add(string.Format("BankAuthID={0}", System.Uri.EscapeDataString(bankAuthID)));
            }
            if (acquirer != null)
            {
                _queryParameters.Add(string.Format("Acquirer={0}", System.Uri.EscapeDataString(acquirer)));
            }
            if (originalSettlementDateFrom != null)
            {
                _queryParameters.Add(string.Format("OriginalSettlementDateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(originalSettlementDateFrom, SerializationSettings).Trim('"'))));
            }
            if (originalSettlementDateTo != null)
            {
                _queryParameters.Add(string.Format("OriginalSettlementDateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(originalSettlementDateTo, SerializationSettings).Trim('"'))));
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (optionText != null)
            {
                _queryParameters.Add(string.Format("OptionText={0}", System.Uri.EscapeDataString(optionText)));
            }
            if (optionValue != null)
            {
                _queryParameters.Add(string.Format("OptionValue={0}", System.Uri.EscapeDataString(optionValue)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IList<FilterOption>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IList<FilterOption>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='merchantTransactionID'>
        /// </param>
        /// <param name='currencies'>
        /// </param>
        /// <param name='exchangeCurrencies'>
        /// </param>
        /// <param name='aPIIds'>
        /// </param>
        /// <param name='bIN'>
        /// </param>
        /// <param name='transactionTypes'>
        /// </param>
        /// <param name='responseCodes'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<PagedResultTransactionsEligibleForCancelRow>> GetTransactionsEligibleForCancelWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), string merchantTransactionID = default(string), IList<string> currencies = default(IList<string>), IList<string> exchangeCurrencies = default(IList<string>), IList<string> aPIIds = default(IList<string>), string bIN = default(string), IList<string> transactionTypes = default(IList<string>), IList<string> responseCodes = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("merchantTransactionID", merchantTransactionID);
                tracingParameters.Add("currencies", currencies);
                tracingParameters.Add("exchangeCurrencies", exchangeCurrencies);
                tracingParameters.Add("aPIIds", aPIIds);
                tracingParameters.Add("bIN", bIN);
                tracingParameters.Add("transactionTypes", transactionTypes);
                tracingParameters.Add("responseCodes", responseCodes);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetTransactionsEligibleForCancel", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "TransactionsEligibleForCancel").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantTransactionID != null)
            {
                _queryParameters.Add(string.Format("MerchantTransactionID={0}", System.Uri.EscapeDataString(merchantTransactionID)));
            }
            if (currencies != null)
            {
                if (currencies.Count == 0)
                {
                    _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in currencies)
                    {
                        _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (exchangeCurrencies != null)
            {
                if (exchangeCurrencies.Count == 0)
                {
                    _queryParameters.Add(string.Format("ExchangeCurrencies={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in exchangeCurrencies)
                    {
                        _queryParameters.Add(string.Format("ExchangeCurrencies={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (aPIIds != null)
            {
                if (aPIIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("APIIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in aPIIds)
                    {
                        _queryParameters.Add(string.Format("APIIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bIN != null)
            {
                _queryParameters.Add(string.Format("BIN={0}", System.Uri.EscapeDataString(bIN)));
            }
            if (transactionTypes != null)
            {
                if (transactionTypes.Count == 0)
                {
                    _queryParameters.Add(string.Format("TransactionTypes={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in transactionTypes)
                    {
                        _queryParameters.Add(string.Format("TransactionTypes={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (responseCodes != null)
            {
                if (responseCodes.Count == 0)
                {
                    _queryParameters.Add(string.Format("ResponseCodes={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in responseCodes)
                    {
                        _queryParameters.Add(string.Format("ResponseCodes={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<PagedResultTransactionsEligibleForCancelRow>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PagedResultTransactionsEligibleForCancelRow>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='merchantTransactionID'>
        /// </param>
        /// <param name='currencies'>
        /// </param>
        /// <param name='exchangeCurrencies'>
        /// </param>
        /// <param name='aPIIds'>
        /// </param>
        /// <param name='bIN'>
        /// </param>
        /// <param name='transactionTypes'>
        /// </param>
        /// <param name='responseCodes'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='optionText'>
        /// </param>
        /// <param name='optionValue'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IList<FilterOption>>> GetTransactionsEligibleForCancelOptionsWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), string merchantTransactionID = default(string), IList<string> currencies = default(IList<string>), IList<string> exchangeCurrencies = default(IList<string>), IList<string> aPIIds = default(IList<string>), string bIN = default(string), IList<string> transactionTypes = default(IList<string>), IList<string> responseCodes = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("merchantTransactionID", merchantTransactionID);
                tracingParameters.Add("currencies", currencies);
                tracingParameters.Add("exchangeCurrencies", exchangeCurrencies);
                tracingParameters.Add("aPIIds", aPIIds);
                tracingParameters.Add("bIN", bIN);
                tracingParameters.Add("transactionTypes", transactionTypes);
                tracingParameters.Add("responseCodes", responseCodes);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("optionText", optionText);
                tracingParameters.Add("optionValue", optionValue);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetTransactionsEligibleForCancelOptions", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "TransactionsEligibleForCancel/Options").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantTransactionID != null)
            {
                _queryParameters.Add(string.Format("MerchantTransactionID={0}", System.Uri.EscapeDataString(merchantTransactionID)));
            }
            if (currencies != null)
            {
                if (currencies.Count == 0)
                {
                    _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in currencies)
                    {
                        _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (exchangeCurrencies != null)
            {
                if (exchangeCurrencies.Count == 0)
                {
                    _queryParameters.Add(string.Format("ExchangeCurrencies={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in exchangeCurrencies)
                    {
                        _queryParameters.Add(string.Format("ExchangeCurrencies={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (aPIIds != null)
            {
                if (aPIIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("APIIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in aPIIds)
                    {
                        _queryParameters.Add(string.Format("APIIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bIN != null)
            {
                _queryParameters.Add(string.Format("BIN={0}", System.Uri.EscapeDataString(bIN)));
            }
            if (transactionTypes != null)
            {
                if (transactionTypes.Count == 0)
                {
                    _queryParameters.Add(string.Format("TransactionTypes={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in transactionTypes)
                    {
                        _queryParameters.Add(string.Format("TransactionTypes={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (responseCodes != null)
            {
                if (responseCodes.Count == 0)
                {
                    _queryParameters.Add(string.Format("ResponseCodes={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in responseCodes)
                    {
                        _queryParameters.Add(string.Format("ResponseCodes={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (optionText != null)
            {
                _queryParameters.Add(string.Format("OptionText={0}", System.Uri.EscapeDataString(optionText)));
            }
            if (optionValue != null)
            {
                _queryParameters.Add(string.Format("OptionValue={0}", System.Uri.EscapeDataString(optionValue)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IList<FilterOption>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IList<FilterOption>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='merchantTransactionID'>
        /// </param>
        /// <param name='currencies'>
        /// </param>
        /// <param name='exchangeCurrencies'>
        /// </param>
        /// <param name='aPIIds'>
        /// </param>
        /// <param name='bIN'>
        /// </param>
        /// <param name='transactionTypes'>
        /// </param>
        /// <param name='responseCodes'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<PagedResultTransactionsEligibleForCaptureRow>> GetTransactionsEligibleForCaptureWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), string merchantTransactionID = default(string), IList<string> currencies = default(IList<string>), IList<string> exchangeCurrencies = default(IList<string>), IList<string> aPIIds = default(IList<string>), string bIN = default(string), IList<string> transactionTypes = default(IList<string>), IList<string> responseCodes = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("merchantTransactionID", merchantTransactionID);
                tracingParameters.Add("currencies", currencies);
                tracingParameters.Add("exchangeCurrencies", exchangeCurrencies);
                tracingParameters.Add("aPIIds", aPIIds);
                tracingParameters.Add("bIN", bIN);
                tracingParameters.Add("transactionTypes", transactionTypes);
                tracingParameters.Add("responseCodes", responseCodes);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetTransactionsEligibleForCapture", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "TransactionsEligibleForCapture").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantTransactionID != null)
            {
                _queryParameters.Add(string.Format("MerchantTransactionID={0}", System.Uri.EscapeDataString(merchantTransactionID)));
            }
            if (currencies != null)
            {
                if (currencies.Count == 0)
                {
                    _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in currencies)
                    {
                        _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (exchangeCurrencies != null)
            {
                if (exchangeCurrencies.Count == 0)
                {
                    _queryParameters.Add(string.Format("ExchangeCurrencies={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in exchangeCurrencies)
                    {
                        _queryParameters.Add(string.Format("ExchangeCurrencies={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (aPIIds != null)
            {
                if (aPIIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("APIIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in aPIIds)
                    {
                        _queryParameters.Add(string.Format("APIIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bIN != null)
            {
                _queryParameters.Add(string.Format("BIN={0}", System.Uri.EscapeDataString(bIN)));
            }
            if (transactionTypes != null)
            {
                if (transactionTypes.Count == 0)
                {
                    _queryParameters.Add(string.Format("TransactionTypes={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in transactionTypes)
                    {
                        _queryParameters.Add(string.Format("TransactionTypes={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (responseCodes != null)
            {
                if (responseCodes.Count == 0)
                {
                    _queryParameters.Add(string.Format("ResponseCodes={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in responseCodes)
                    {
                        _queryParameters.Add(string.Format("ResponseCodes={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<PagedResultTransactionsEligibleForCaptureRow>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PagedResultTransactionsEligibleForCaptureRow>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='merchantTransactionID'>
        /// </param>
        /// <param name='currencies'>
        /// </param>
        /// <param name='exchangeCurrencies'>
        /// </param>
        /// <param name='aPIIds'>
        /// </param>
        /// <param name='bIN'>
        /// </param>
        /// <param name='transactionTypes'>
        /// </param>
        /// <param name='responseCodes'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='optionText'>
        /// </param>
        /// <param name='optionValue'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IList<FilterOption>>> GetTransactionsEligibleForCaptureOptionsWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), string merchantTransactionID = default(string), IList<string> currencies = default(IList<string>), IList<string> exchangeCurrencies = default(IList<string>), IList<string> aPIIds = default(IList<string>), string bIN = default(string), IList<string> transactionTypes = default(IList<string>), IList<string> responseCodes = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("merchantTransactionID", merchantTransactionID);
                tracingParameters.Add("currencies", currencies);
                tracingParameters.Add("exchangeCurrencies", exchangeCurrencies);
                tracingParameters.Add("aPIIds", aPIIds);
                tracingParameters.Add("bIN", bIN);
                tracingParameters.Add("transactionTypes", transactionTypes);
                tracingParameters.Add("responseCodes", responseCodes);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("optionText", optionText);
                tracingParameters.Add("optionValue", optionValue);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetTransactionsEligibleForCaptureOptions", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "TransactionsEligibleForCapture/Options").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantTransactionID != null)
            {
                _queryParameters.Add(string.Format("MerchantTransactionID={0}", System.Uri.EscapeDataString(merchantTransactionID)));
            }
            if (currencies != null)
            {
                if (currencies.Count == 0)
                {
                    _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in currencies)
                    {
                        _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (exchangeCurrencies != null)
            {
                if (exchangeCurrencies.Count == 0)
                {
                    _queryParameters.Add(string.Format("ExchangeCurrencies={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in exchangeCurrencies)
                    {
                        _queryParameters.Add(string.Format("ExchangeCurrencies={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (aPIIds != null)
            {
                if (aPIIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("APIIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in aPIIds)
                    {
                        _queryParameters.Add(string.Format("APIIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bIN != null)
            {
                _queryParameters.Add(string.Format("BIN={0}", System.Uri.EscapeDataString(bIN)));
            }
            if (transactionTypes != null)
            {
                if (transactionTypes.Count == 0)
                {
                    _queryParameters.Add(string.Format("TransactionTypes={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in transactionTypes)
                    {
                        _queryParameters.Add(string.Format("TransactionTypes={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (responseCodes != null)
            {
                if (responseCodes.Count == 0)
                {
                    _queryParameters.Add(string.Format("ResponseCodes={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in responseCodes)
                    {
                        _queryParameters.Add(string.Format("ResponseCodes={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (optionText != null)
            {
                _queryParameters.Add(string.Format("OptionText={0}", System.Uri.EscapeDataString(optionText)));
            }
            if (optionValue != null)
            {
                _queryParameters.Add(string.Format("OptionValue={0}", System.Uri.EscapeDataString(optionValue)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IList<FilterOption>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IList<FilterOption>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='merchantTransactionID'>
        /// </param>
        /// <param name='currencies'>
        /// </param>
        /// <param name='exchangeCurrencies'>
        /// </param>
        /// <param name='aPIIds'>
        /// </param>
        /// <param name='bIN'>
        /// </param>
        /// <param name='transactionTypes'>
        /// </param>
        /// <param name='responseCodes'>
        /// </param>
        /// <param name='loginUser'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<PagedResultTransactionsEligibleForRefundRow>> GetTransactionsEligibleForRefundWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), string merchantTransactionID = default(string), IList<string> currencies = default(IList<string>), IList<string> exchangeCurrencies = default(IList<string>), IList<string> aPIIds = default(IList<string>), string bIN = default(string), IList<string> transactionTypes = default(IList<string>), IList<string> responseCodes = default(IList<string>), string loginUser = default(string), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("merchantTransactionID", merchantTransactionID);
                tracingParameters.Add("currencies", currencies);
                tracingParameters.Add("exchangeCurrencies", exchangeCurrencies);
                tracingParameters.Add("aPIIds", aPIIds);
                tracingParameters.Add("bIN", bIN);
                tracingParameters.Add("transactionTypes", transactionTypes);
                tracingParameters.Add("responseCodes", responseCodes);
                tracingParameters.Add("loginUser", loginUser);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetTransactionsEligibleForRefund", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "TransactionsEligibleForRefund").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantTransactionID != null)
            {
                _queryParameters.Add(string.Format("MerchantTransactionID={0}", System.Uri.EscapeDataString(merchantTransactionID)));
            }
            if (currencies != null)
            {
                if (currencies.Count == 0)
                {
                    _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in currencies)
                    {
                        _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (exchangeCurrencies != null)
            {
                if (exchangeCurrencies.Count == 0)
                {
                    _queryParameters.Add(string.Format("ExchangeCurrencies={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in exchangeCurrencies)
                    {
                        _queryParameters.Add(string.Format("ExchangeCurrencies={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (aPIIds != null)
            {
                if (aPIIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("APIIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in aPIIds)
                    {
                        _queryParameters.Add(string.Format("APIIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bIN != null)
            {
                _queryParameters.Add(string.Format("BIN={0}", System.Uri.EscapeDataString(bIN)));
            }
            if (transactionTypes != null)
            {
                if (transactionTypes.Count == 0)
                {
                    _queryParameters.Add(string.Format("TransactionTypes={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in transactionTypes)
                    {
                        _queryParameters.Add(string.Format("TransactionTypes={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (responseCodes != null)
            {
                if (responseCodes.Count == 0)
                {
                    _queryParameters.Add(string.Format("ResponseCodes={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in responseCodes)
                    {
                        _queryParameters.Add(string.Format("ResponseCodes={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (loginUser != null)
            {
                _queryParameters.Add(string.Format("LoginUser={0}", System.Uri.EscapeDataString(loginUser)));
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<PagedResultTransactionsEligibleForRefundRow>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PagedResultTransactionsEligibleForRefundRow>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='merchantTransactionID'>
        /// </param>
        /// <param name='currencies'>
        /// </param>
        /// <param name='exchangeCurrencies'>
        /// </param>
        /// <param name='aPIIds'>
        /// </param>
        /// <param name='bIN'>
        /// </param>
        /// <param name='transactionTypes'>
        /// </param>
        /// <param name='responseCodes'>
        /// </param>
        /// <param name='loginUser'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='optionText'>
        /// </param>
        /// <param name='optionValue'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IList<FilterOption>>> GetTransactionsEligibleForRefundOptionsWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), string merchantTransactionID = default(string), IList<string> currencies = default(IList<string>), IList<string> exchangeCurrencies = default(IList<string>), IList<string> aPIIds = default(IList<string>), string bIN = default(string), IList<string> transactionTypes = default(IList<string>), IList<string> responseCodes = default(IList<string>), string loginUser = default(string), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("merchantTransactionID", merchantTransactionID);
                tracingParameters.Add("currencies", currencies);
                tracingParameters.Add("exchangeCurrencies", exchangeCurrencies);
                tracingParameters.Add("aPIIds", aPIIds);
                tracingParameters.Add("bIN", bIN);
                tracingParameters.Add("transactionTypes", transactionTypes);
                tracingParameters.Add("responseCodes", responseCodes);
                tracingParameters.Add("loginUser", loginUser);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("optionText", optionText);
                tracingParameters.Add("optionValue", optionValue);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetTransactionsEligibleForRefundOptions", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "TransactionsEligibleForRefund/Options").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantTransactionID != null)
            {
                _queryParameters.Add(string.Format("MerchantTransactionID={0}", System.Uri.EscapeDataString(merchantTransactionID)));
            }
            if (currencies != null)
            {
                if (currencies.Count == 0)
                {
                    _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in currencies)
                    {
                        _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (exchangeCurrencies != null)
            {
                if (exchangeCurrencies.Count == 0)
                {
                    _queryParameters.Add(string.Format("ExchangeCurrencies={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in exchangeCurrencies)
                    {
                        _queryParameters.Add(string.Format("ExchangeCurrencies={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (aPIIds != null)
            {
                if (aPIIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("APIIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in aPIIds)
                    {
                        _queryParameters.Add(string.Format("APIIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bIN != null)
            {
                _queryParameters.Add(string.Format("BIN={0}", System.Uri.EscapeDataString(bIN)));
            }
            if (transactionTypes != null)
            {
                if (transactionTypes.Count == 0)
                {
                    _queryParameters.Add(string.Format("TransactionTypes={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in transactionTypes)
                    {
                        _queryParameters.Add(string.Format("TransactionTypes={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (responseCodes != null)
            {
                if (responseCodes.Count == 0)
                {
                    _queryParameters.Add(string.Format("ResponseCodes={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in responseCodes)
                    {
                        _queryParameters.Add(string.Format("ResponseCodes={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (loginUser != null)
            {
                _queryParameters.Add(string.Format("LoginUser={0}", System.Uri.EscapeDataString(loginUser)));
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (optionText != null)
            {
                _queryParameters.Add(string.Format("OptionText={0}", System.Uri.EscapeDataString(optionText)));
            }
            if (optionValue != null)
            {
                _queryParameters.Add(string.Format("OptionValue={0}", System.Uri.EscapeDataString(optionValue)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IList<FilterOption>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IList<FilterOption>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='merchantTransactionID'>
        /// </param>
        /// <param name='currencies'>
        /// </param>
        /// <param name='exchangeCurrencies'>
        /// </param>
        /// <param name='aPIIds'>
        /// </param>
        /// <param name='bIN'>
        /// </param>
        /// <param name='transactionTypes'>
        /// </param>
        /// <param name='responseCodes'>
        /// </param>
        /// <param name='loginUser'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<PagedResultTransactionsEligibleForRefundApprovalRow>> GetTransactionsEligibleForRefundApprovalWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), string merchantTransactionID = default(string), IList<string> currencies = default(IList<string>), IList<string> exchangeCurrencies = default(IList<string>), IList<string> aPIIds = default(IList<string>), string bIN = default(string), IList<string> transactionTypes = default(IList<string>), IList<string> responseCodes = default(IList<string>), string loginUser = default(string), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("merchantTransactionID", merchantTransactionID);
                tracingParameters.Add("currencies", currencies);
                tracingParameters.Add("exchangeCurrencies", exchangeCurrencies);
                tracingParameters.Add("aPIIds", aPIIds);
                tracingParameters.Add("bIN", bIN);
                tracingParameters.Add("transactionTypes", transactionTypes);
                tracingParameters.Add("responseCodes", responseCodes);
                tracingParameters.Add("loginUser", loginUser);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetTransactionsEligibleForRefundApproval", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "TransactionsEligibleForRefundApproval").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantTransactionID != null)
            {
                _queryParameters.Add(string.Format("MerchantTransactionID={0}", System.Uri.EscapeDataString(merchantTransactionID)));
            }
            if (currencies != null)
            {
                if (currencies.Count == 0)
                {
                    _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in currencies)
                    {
                        _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (exchangeCurrencies != null)
            {
                if (exchangeCurrencies.Count == 0)
                {
                    _queryParameters.Add(string.Format("ExchangeCurrencies={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in exchangeCurrencies)
                    {
                        _queryParameters.Add(string.Format("ExchangeCurrencies={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (aPIIds != null)
            {
                if (aPIIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("APIIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in aPIIds)
                    {
                        _queryParameters.Add(string.Format("APIIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bIN != null)
            {
                _queryParameters.Add(string.Format("BIN={0}", System.Uri.EscapeDataString(bIN)));
            }
            if (transactionTypes != null)
            {
                if (transactionTypes.Count == 0)
                {
                    _queryParameters.Add(string.Format("TransactionTypes={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in transactionTypes)
                    {
                        _queryParameters.Add(string.Format("TransactionTypes={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (responseCodes != null)
            {
                if (responseCodes.Count == 0)
                {
                    _queryParameters.Add(string.Format("ResponseCodes={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in responseCodes)
                    {
                        _queryParameters.Add(string.Format("ResponseCodes={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (loginUser != null)
            {
                _queryParameters.Add(string.Format("LoginUser={0}", System.Uri.EscapeDataString(loginUser)));
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<PagedResultTransactionsEligibleForRefundApprovalRow>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PagedResultTransactionsEligibleForRefundApprovalRow>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='merchantTransactionID'>
        /// </param>
        /// <param name='currencies'>
        /// </param>
        /// <param name='exchangeCurrencies'>
        /// </param>
        /// <param name='aPIIds'>
        /// </param>
        /// <param name='bIN'>
        /// </param>
        /// <param name='transactionTypes'>
        /// </param>
        /// <param name='responseCodes'>
        /// </param>
        /// <param name='loginUser'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='optionText'>
        /// </param>
        /// <param name='optionValue'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IList<FilterOption>>> GetTransactionsEligibleForRefundApprovalOptionsWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), string merchantTransactionID = default(string), IList<string> currencies = default(IList<string>), IList<string> exchangeCurrencies = default(IList<string>), IList<string> aPIIds = default(IList<string>), string bIN = default(string), IList<string> transactionTypes = default(IList<string>), IList<string> responseCodes = default(IList<string>), string loginUser = default(string), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("merchantTransactionID", merchantTransactionID);
                tracingParameters.Add("currencies", currencies);
                tracingParameters.Add("exchangeCurrencies", exchangeCurrencies);
                tracingParameters.Add("aPIIds", aPIIds);
                tracingParameters.Add("bIN", bIN);
                tracingParameters.Add("transactionTypes", transactionTypes);
                tracingParameters.Add("responseCodes", responseCodes);
                tracingParameters.Add("loginUser", loginUser);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("optionText", optionText);
                tracingParameters.Add("optionValue", optionValue);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetTransactionsEligibleForRefundApprovalOptions", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "TransactionsEligibleForRefundApproval/Options").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantTransactionID != null)
            {
                _queryParameters.Add(string.Format("MerchantTransactionID={0}", System.Uri.EscapeDataString(merchantTransactionID)));
            }
            if (currencies != null)
            {
                if (currencies.Count == 0)
                {
                    _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in currencies)
                    {
                        _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (exchangeCurrencies != null)
            {
                if (exchangeCurrencies.Count == 0)
                {
                    _queryParameters.Add(string.Format("ExchangeCurrencies={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in exchangeCurrencies)
                    {
                        _queryParameters.Add(string.Format("ExchangeCurrencies={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (aPIIds != null)
            {
                if (aPIIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("APIIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in aPIIds)
                    {
                        _queryParameters.Add(string.Format("APIIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bIN != null)
            {
                _queryParameters.Add(string.Format("BIN={0}", System.Uri.EscapeDataString(bIN)));
            }
            if (transactionTypes != null)
            {
                if (transactionTypes.Count == 0)
                {
                    _queryParameters.Add(string.Format("TransactionTypes={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in transactionTypes)
                    {
                        _queryParameters.Add(string.Format("TransactionTypes={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (responseCodes != null)
            {
                if (responseCodes.Count == 0)
                {
                    _queryParameters.Add(string.Format("ResponseCodes={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in responseCodes)
                    {
                        _queryParameters.Add(string.Format("ResponseCodes={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (loginUser != null)
            {
                _queryParameters.Add(string.Format("LoginUser={0}", System.Uri.EscapeDataString(loginUser)));
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (optionText != null)
            {
                _queryParameters.Add(string.Format("OptionText={0}", System.Uri.EscapeDataString(optionText)));
            }
            if (optionValue != null)
            {
                _queryParameters.Add(string.Format("OptionValue={0}", System.Uri.EscapeDataString(optionValue)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IList<FilterOption>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IList<FilterOption>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='aPIIDs'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<PagedResultTransactionSuccessFailRow>> GetTransactionSuccessFailWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> aPIIDs = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("aPIIDs", aPIIDs);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetTransactionSuccessFail", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "TransactionSuccessFail").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (aPIIDs != null)
            {
                if (aPIIDs.Count == 0)
                {
                    _queryParameters.Add(string.Format("APIIDs={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in aPIIDs)
                    {
                        _queryParameters.Add(string.Format("APIIDs={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<PagedResultTransactionSuccessFailRow>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PagedResultTransactionSuccessFailRow>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='aPIIDs'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='optionText'>
        /// </param>
        /// <param name='optionValue'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IList<FilterOption>>> GetTransactionSuccessFailOptionsWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> aPIIDs = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("aPIIDs", aPIIDs);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("optionText", optionText);
                tracingParameters.Add("optionValue", optionValue);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetTransactionSuccessFailOptions", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "TransactionSuccessFail/Options").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (aPIIDs != null)
            {
                if (aPIIDs.Count == 0)
                {
                    _queryParameters.Add(string.Format("APIIDs={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in aPIIDs)
                    {
                        _queryParameters.Add(string.Format("APIIDs={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (optionText != null)
            {
                _queryParameters.Add(string.Format("OptionText={0}", System.Uri.EscapeDataString(optionText)));
            }
            if (optionValue != null)
            {
                _queryParameters.Add(string.Format("OptionValue={0}", System.Uri.EscapeDataString(optionValue)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IList<FilterOption>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IList<FilterOption>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='aPIIds'>
        /// </param>
        /// <param name='currencies'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<PagedResultTransactionSummaryRow>> GetTransactionSummaryWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> aPIIds = default(IList<string>), IList<string> currencies = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("aPIIds", aPIIds);
                tracingParameters.Add("currencies", currencies);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetTransactionSummary", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "TransactionSummary").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (aPIIds != null)
            {
                if (aPIIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("APIIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in aPIIds)
                    {
                        _queryParameters.Add(string.Format("APIIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (currencies != null)
            {
                if (currencies.Count == 0)
                {
                    _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in currencies)
                    {
                        _queryParameters.Add(string.Format("Currencies={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<PagedResultTransactionSummaryRow>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PagedResultTransactionSummaryRow>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<PagedResultTransactionVolumeRow>> GetTransactionVolumeWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetTransactionVolume", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "TransactionVolume").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<PagedResultTransactionVolumeRow>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PagedResultTransactionVolumeRow>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='mID'>
        /// </param>
        /// <param name='groupByBankId'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<PagedResultUptimePerformanceIndicatorsRow>> GetUptimePerformanceIndicatorsWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), string mID = default(string), bool? groupByBankId = default(bool?), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("mID", mID);
                tracingParameters.Add("groupByBankId", groupByBankId);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetUptimePerformanceIndicators", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "UptimePerformanceIndicators").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (mID != null)
            {
                _queryParameters.Add(string.Format("MID={0}", System.Uri.EscapeDataString(mID)));
            }
            if (groupByBankId != null)
            {
                _queryParameters.Add(string.Format("GroupByBankId={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(groupByBankId, SerializationSettings).Trim('"'))));
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<PagedResultUptimePerformanceIndicatorsRow>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PagedResultUptimePerformanceIndicatorsRow>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='globalIds'>
        /// </param>
        /// <param name='bankIds'>
        /// </param>
        /// <param name='corporateIds'>
        /// </param>
        /// <param name='merchantIds'>
        /// </param>
        /// <param name='mID'>
        /// </param>
        /// <param name='groupByBankId'>
        /// </param>
        /// <param name='dateFrom'>
        /// </param>
        /// <param name='dateTo'>
        /// </param>
        /// <param name='timeZoneOffset'>
        /// </param>
        /// <param name='orderBys'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='optionText'>
        /// </param>
        /// <param name='optionValue'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IList<FilterOption>>> GetUptimePerformanceIndicatorsOptionsWithHttpMessagesAsync(IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), string mID = default(string), bool? groupByBankId = default(bool?), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("globalIds", globalIds);
                tracingParameters.Add("bankIds", bankIds);
                tracingParameters.Add("corporateIds", corporateIds);
                tracingParameters.Add("merchantIds", merchantIds);
                tracingParameters.Add("mID", mID);
                tracingParameters.Add("groupByBankId", groupByBankId);
                tracingParameters.Add("dateFrom", dateFrom);
                tracingParameters.Add("dateTo", dateTo);
                tracingParameters.Add("timeZoneOffset", timeZoneOffset);
                tracingParameters.Add("orderBys", orderBys);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("page", page);
                tracingParameters.Add("optionText", optionText);
                tracingParameters.Add("optionValue", optionValue);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetUptimePerformanceIndicatorsOptions", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "UptimePerformanceIndicators/Options").ToString();
            List<string> _queryParameters = new List<string>();
            if (globalIds != null)
            {
                if (globalIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in globalIds)
                    {
                        _queryParameters.Add(string.Format("GlobalIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (bankIds != null)
            {
                if (bankIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in bankIds)
                    {
                        _queryParameters.Add(string.Format("BankIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (corporateIds != null)
            {
                if (corporateIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in corporateIds)
                    {
                        _queryParameters.Add(string.Format("CorporateIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (merchantIds != null)
            {
                if (merchantIds.Count == 0)
                {
                    _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in merchantIds)
                    {
                        _queryParameters.Add(string.Format("MerchantIds={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (mID != null)
            {
                _queryParameters.Add(string.Format("MID={0}", System.Uri.EscapeDataString(mID)));
            }
            if (groupByBankId != null)
            {
                _queryParameters.Add(string.Format("GroupByBankId={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(groupByBankId, SerializationSettings).Trim('"'))));
            }
            if (dateFrom != null)
            {
                _queryParameters.Add(string.Format("DateFrom={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateFrom, SerializationSettings).Trim('"'))));
            }
            if (dateTo != null)
            {
                _queryParameters.Add(string.Format("DateTo={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(dateTo, SerializationSettings).Trim('"'))));
            }
            if (timeZoneOffset != null)
            {
                _queryParameters.Add(string.Format("TimeZoneOffset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(timeZoneOffset, SerializationSettings).Trim('"'))));
            }
            if (orderBys != null)
            {
                if (orderBys.Count == 0)
                {
                    _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString(string.Empty)));
                }
                else
                {
                    foreach (var _item in orderBys)
                    {
                        _queryParameters.Add(string.Format("OrderBys={0}", System.Uri.EscapeDataString("" + _item)));
                    }
                }
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("PageSize={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, SerializationSettings).Trim('"'))));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("Page={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(page, SerializationSettings).Trim('"'))));
            }
            if (optionText != null)
            {
                _queryParameters.Add(string.Format("OptionText={0}", System.Uri.EscapeDataString(optionText)));
            }
            if (optionValue != null)
            {
                _queryParameters.Add(string.Format("OptionValue={0}", System.Uri.EscapeDataString(optionValue)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IList<FilterOption>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IList<FilterOption>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

    }
}
