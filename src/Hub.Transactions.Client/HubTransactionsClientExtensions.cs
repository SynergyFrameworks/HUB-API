// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Hub.Transactions.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for HubTransactionsClient.
    /// </summary>
    public static partial class HubTransactionsClientExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='groupByBankId'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            public static PagedResultAPIResponseTimesRow GetAPIResponseTimes(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), bool? groupByBankId = default(bool?), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?))
            {
                return operations.GetAPIResponseTimesAsync(globalIds, bankIds, corporateIds, merchantIds, groupByBankId, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='groupByBankId'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResultAPIResponseTimesRow> GetAPIResponseTimesAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), bool? groupByBankId = default(bool?), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAPIResponseTimesWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, groupByBankId, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='groupByBankId'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            public static IList<FilterOption> GetAPIResponseTimesOptions(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), bool? groupByBankId = default(bool?), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string))
            {
                return operations.GetAPIResponseTimesOptionsAsync(globalIds, bankIds, corporateIds, merchantIds, groupByBankId, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='groupByBankId'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FilterOption>> GetAPIResponseTimesOptionsAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), bool? groupByBankId = default(bool?), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAPIResponseTimesOptionsWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, groupByBankId, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            public static PagedResultAuthorisationBreakdownSummaryRow GetAuthorisationBreakdownSummary(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?))
            {
                return operations.GetAuthorisationBreakdownSummaryAsync(globalIds, bankIds, corporateIds, merchantIds, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResultAuthorisationBreakdownSummaryRow> GetAuthorisationBreakdownSummaryAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAuthorisationBreakdownSummaryWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            public static IList<FilterOption> GetAuthorisationBreakdownSummaryOptions(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string))
            {
                return operations.GetAuthorisationBreakdownSummaryOptionsAsync(globalIds, bankIds, corporateIds, merchantIds, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FilterOption>> GetAuthorisationBreakdownSummaryOptionsAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAuthorisationBreakdownSummaryOptionsWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            public static PagedResultAuthorisationByBINSummaryRow GetAuthorisationByBINSummary(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?))
            {
                return operations.GetAuthorisationByBINSummaryAsync(globalIds, bankIds, corporateIds, merchantIds, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResultAuthorisationByBINSummaryRow> GetAuthorisationByBINSummaryAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAuthorisationByBINSummaryWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            public static IList<FilterOption> GetAuthorisationByBINSummaryOptions(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string))
            {
                return operations.GetAuthorisationByBINSummaryOptionsAsync(globalIds, bankIds, corporateIds, merchantIds, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FilterOption>> GetAuthorisationByBINSummaryOptionsAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAuthorisationByBINSummaryOptionsWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='mID'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            public static PagedResultAuthorisationSummaryRow GetAuthorisationSummary(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), string mID = default(string), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?))
            {
                return operations.GetAuthorisationSummaryAsync(globalIds, bankIds, corporateIds, mID, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='mID'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResultAuthorisationSummaryRow> GetAuthorisationSummaryAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), string mID = default(string), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAuthorisationSummaryWithHttpMessagesAsync(globalIds, bankIds, corporateIds, mID, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='mID'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            public static IList<FilterOption> GetAuthorisationSummaryOptions(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), string mID = default(string), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string))
            {
                return operations.GetAuthorisationSummaryOptionsAsync(globalIds, bankIds, corporateIds, mID, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='mID'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FilterOption>> GetAuthorisationSummaryOptionsAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), string mID = default(string), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAuthorisationSummaryOptionsWithHttpMessagesAsync(globalIds, bankIds, corporateIds, mID, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            public static PagedResultAuthResponseReasonRow GetAuthResponseReason(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?))
            {
                return operations.GetAuthResponseReasonAsync(globalIds, bankIds, corporateIds, merchantIds, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResultAuthResponseReasonRow> GetAuthResponseReasonAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAuthResponseReasonWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            public static IList<FilterOption> GetAuthResponseReasonOptions(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string))
            {
                return operations.GetAuthResponseReasonOptionsAsync(globalIds, bankIds, corporateIds, merchantIds, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FilterOption>> GetAuthResponseReasonOptionsAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAuthResponseReasonOptionsWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='aPIIds'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            public static PagedResultBillingSummaryRow GetBillingSummary(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> aPIIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?))
            {
                return operations.GetBillingSummaryAsync(globalIds, bankIds, corporateIds, merchantIds, aPIIds, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='aPIIds'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResultBillingSummaryRow> GetBillingSummaryAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> aPIIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBillingSummaryWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, aPIIds, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='aPIIds'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            public static IList<FilterOption> GetBillingSummaryOptions(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> aPIIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string))
            {
                return operations.GetBillingSummaryOptionsAsync(globalIds, bankIds, corporateIds, merchantIds, aPIIds, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='aPIIds'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FilterOption>> GetBillingSummaryOptionsAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> aPIIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBillingSummaryOptionsWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, aPIIds, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='transactionTypes'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='exchangeCurrencies'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            public static PagedResultCaptureRefundSummaryRow GetCaptureRefundSummary(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> transactionTypes = default(IList<string>), IList<string> currencies = default(IList<string>), IList<string> exchangeCurrencies = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?))
            {
                return operations.GetCaptureRefundSummaryAsync(globalIds, bankIds, corporateIds, merchantIds, transactionTypes, currencies, exchangeCurrencies, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='transactionTypes'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='exchangeCurrencies'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResultCaptureRefundSummaryRow> GetCaptureRefundSummaryAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> transactionTypes = default(IList<string>), IList<string> currencies = default(IList<string>), IList<string> exchangeCurrencies = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCaptureRefundSummaryWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, transactionTypes, currencies, exchangeCurrencies, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='transactionTypes'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='exchangeCurrencies'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            public static IList<FilterOption> GetCaptureRefundSummaryOptions(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> transactionTypes = default(IList<string>), IList<string> currencies = default(IList<string>), IList<string> exchangeCurrencies = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string))
            {
                return operations.GetCaptureRefundSummaryOptionsAsync(globalIds, bankIds, corporateIds, merchantIds, transactionTypes, currencies, exchangeCurrencies, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='transactionTypes'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='exchangeCurrencies'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FilterOption>> GetCaptureRefundSummaryOptionsAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> transactionTypes = default(IList<string>), IList<string> currencies = default(IList<string>), IList<string> exchangeCurrencies = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCaptureRefundSummaryOptionsWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, transactionTypes, currencies, exchangeCurrencies, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            public static PagedResultCardTypeBreakdownRow GetCardTypeBreakdown(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?))
            {
                return operations.GetCardTypeBreakdownAsync(globalIds, bankIds, corporateIds, merchantIds, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResultCardTypeBreakdownRow> GetCardTypeBreakdownAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCardTypeBreakdownWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            public static IList<FilterOption> GetCardTypeBreakdownOptions(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string))
            {
                return operations.GetCardTypeBreakdownOptionsAsync(globalIds, bankIds, corporateIds, merchantIds, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FilterOption>> GetCardTypeBreakdownOptionsAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCardTypeBreakdownOptionsWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='iDs'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            public static PagedResultChargebackDetailsRow GetChargebackDetails(this IHubTransactionsClient operations, IList<int?> iDs = default(IList<int?>), int? pageSize = default(int?), int? page = default(int?))
            {
                return operations.GetChargebackDetailsAsync(iDs, pageSize, page).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='iDs'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResultChargebackDetailsRow> GetChargebackDetailsAsync(this IHubTransactionsClient operations, IList<int?> iDs = default(IList<int?>), int? pageSize = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetChargebackDetailsWithHttpMessagesAsync(iDs, pageSize, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            public static PagedResultDashboardOriginRow GetDashboardOrigin(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?))
            {
                return operations.GetDashboardOriginAsync(globalIds, bankIds, corporateIds, merchantIds, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResultDashboardOriginRow> GetDashboardOriginAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDashboardOriginWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            public static PagedResultDashboardPaymentMethodRow GetDashboardPaymentMethod(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?))
            {
                return operations.GetDashboardPaymentMethodAsync(globalIds, bankIds, corporateIds, merchantIds, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResultDashboardPaymentMethodRow> GetDashboardPaymentMethodAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDashboardPaymentMethodWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='transactionTypes'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            public static PagedResultHubSummaryDetailRow GetHubSummaryDetail(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> transactionTypes = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?))
            {
                return operations.GetHubSummaryDetailAsync(globalIds, bankIds, corporateIds, merchantIds, transactionTypes, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='transactionTypes'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResultHubSummaryDetailRow> GetHubSummaryDetailAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> transactionTypes = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHubSummaryDetailWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, transactionTypes, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='transactionTypes'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            public static IList<FilterOption> GetHubSummaryDetailOptions(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> transactionTypes = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string))
            {
                return operations.GetHubSummaryDetailOptionsAsync(globalIds, bankIds, corporateIds, merchantIds, transactionTypes, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='transactionTypes'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FilterOption>> GetHubSummaryDetailOptionsAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> transactionTypes = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHubSummaryDetailOptionsWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, transactionTypes, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            public static PagedResultPaymentMethodBreakdownRow GetPaymentMethodBreakdown(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?))
            {
                return operations.GetPaymentMethodBreakdownAsync(globalIds, bankIds, corporateIds, merchantIds, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResultPaymentMethodBreakdownRow> GetPaymentMethodBreakdownAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPaymentMethodBreakdownWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            public static IList<FilterOption> GetPaymentMethodBreakdownOptions(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string))
            {
                return operations.GetPaymentMethodBreakdownOptionsAsync(globalIds, bankIds, corporateIds, merchantIds, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FilterOption>> GetPaymentMethodBreakdownOptionsAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPaymentMethodBreakdownOptionsWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='iDs'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            public static PagedResultPointsInstallmentsDetailsRow GetPointsInstallmentsDetails(this IHubTransactionsClient operations, IList<int?> iDs = default(IList<int?>), int? pageSize = default(int?), int? page = default(int?))
            {
                return operations.GetPointsInstallmentsDetailsAsync(iDs, pageSize, page).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='iDs'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResultPointsInstallmentsDetailsRow> GetPointsInstallmentsDetailsAsync(this IHubTransactionsClient operations, IList<int?> iDs = default(IList<int?>), int? pageSize = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPointsInstallmentsDetailsWithHttpMessagesAsync(iDs, pageSize, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='transactionTypes'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            public static PagedResultProductSummaryRow GetProductSummary(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> transactionTypes = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?))
            {
                return operations.GetProductSummaryAsync(globalIds, corporateIds, bankIds, merchantIds, transactionTypes, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='transactionTypes'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResultProductSummaryRow> GetProductSummaryAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> transactionTypes = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProductSummaryWithHttpMessagesAsync(globalIds, corporateIds, bankIds, merchantIds, transactionTypes, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='transactionTypes'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            public static IList<FilterOption> GetProductSummaryOptions(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> transactionTypes = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string))
            {
                return operations.GetProductSummaryOptionsAsync(globalIds, corporateIds, bankIds, merchantIds, transactionTypes, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='transactionTypes'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FilterOption>> GetProductSummaryOptionsAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> transactionTypes = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProductSummaryOptionsWithHttpMessagesAsync(globalIds, corporateIds, bankIds, merchantIds, transactionTypes, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='exchangeCurrencies'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            public static PagedResultRefundRatesRow GetRefundRates(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> currencies = default(IList<string>), IList<string> exchangeCurrencies = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?))
            {
                return operations.GetRefundRatesAsync(globalIds, bankIds, corporateIds, merchantIds, currencies, exchangeCurrencies, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='exchangeCurrencies'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResultRefundRatesRow> GetRefundRatesAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> currencies = default(IList<string>), IList<string> exchangeCurrencies = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRefundRatesWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, currencies, exchangeCurrencies, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='exchangeCurrencies'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            public static IList<FilterOption> GetRefundRatesOptions(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> currencies = default(IList<string>), IList<string> exchangeCurrencies = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string))
            {
                return operations.GetRefundRatesOptionsAsync(globalIds, bankIds, corporateIds, merchantIds, currencies, exchangeCurrencies, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='exchangeCurrencies'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FilterOption>> GetRefundRatesOptionsAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> currencies = default(IList<string>), IList<string> exchangeCurrencies = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRefundRatesOptionsWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, currencies, exchangeCurrencies, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='iDs'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            public static PagedResultRFIDetailsRow GetRFIDetails(this IHubTransactionsClient operations, IList<int?> iDs = default(IList<int?>), int? pageSize = default(int?), int? page = default(int?))
            {
                return operations.GetRFIDetailsAsync(iDs, pageSize, page).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='iDs'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResultRFIDetailsRow> GetRFIDetailsAsync(this IHubTransactionsClient operations, IList<int?> iDs = default(IList<int?>), int? pageSize = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRFIDetailsWithHttpMessagesAsync(iDs, pageSize, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transactionTypes'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='responseCodes'>
            /// </param>
            /// <param name='bIN'>
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='merchantTransactionID'>
            /// </param>
            /// <param name='product'>
            /// </param>
            /// <param name='exchangeCurrencies'>
            /// </param>
            /// <param name='emailAddress'>
            /// </param>
            /// <param name='paymentMethods'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            public static PagedResultRiskDetailRow GetRiskDetail(this IHubTransactionsClient operations, IList<string> transactionTypes = default(IList<string>), IList<string> currencies = default(IList<string>), IList<string> responseCodes = default(IList<string>), string bIN = default(string), IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), string merchantTransactionID = default(string), string product = default(string), IList<string> exchangeCurrencies = default(IList<string>), string emailAddress = default(string), IList<string> paymentMethods = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?))
            {
                return operations.GetRiskDetailAsync(transactionTypes, currencies, responseCodes, bIN, globalIds, bankIds, corporateIds, merchantIds, merchantTransactionID, product, exchangeCurrencies, emailAddress, paymentMethods, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transactionTypes'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='responseCodes'>
            /// </param>
            /// <param name='bIN'>
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='merchantTransactionID'>
            /// </param>
            /// <param name='product'>
            /// </param>
            /// <param name='exchangeCurrencies'>
            /// </param>
            /// <param name='emailAddress'>
            /// </param>
            /// <param name='paymentMethods'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResultRiskDetailRow> GetRiskDetailAsync(this IHubTransactionsClient operations, IList<string> transactionTypes = default(IList<string>), IList<string> currencies = default(IList<string>), IList<string> responseCodes = default(IList<string>), string bIN = default(string), IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), string merchantTransactionID = default(string), string product = default(string), IList<string> exchangeCurrencies = default(IList<string>), string emailAddress = default(string), IList<string> paymentMethods = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRiskDetailWithHttpMessagesAsync(transactionTypes, currencies, responseCodes, bIN, globalIds, bankIds, corporateIds, merchantIds, merchantTransactionID, product, exchangeCurrencies, emailAddress, paymentMethods, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transactionTypes'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='responseCodes'>
            /// </param>
            /// <param name='bIN'>
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='merchantTransactionID'>
            /// </param>
            /// <param name='product'>
            /// </param>
            /// <param name='exchangeCurrencies'>
            /// </param>
            /// <param name='emailAddress'>
            /// </param>
            /// <param name='paymentMethods'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            public static IList<FilterOption> GetRiskDetailOptions(this IHubTransactionsClient operations, IList<string> transactionTypes = default(IList<string>), IList<string> currencies = default(IList<string>), IList<string> responseCodes = default(IList<string>), string bIN = default(string), IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), string merchantTransactionID = default(string), string product = default(string), IList<string> exchangeCurrencies = default(IList<string>), string emailAddress = default(string), IList<string> paymentMethods = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string))
            {
                return operations.GetRiskDetailOptionsAsync(transactionTypes, currencies, responseCodes, bIN, globalIds, bankIds, corporateIds, merchantIds, merchantTransactionID, product, exchangeCurrencies, emailAddress, paymentMethods, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transactionTypes'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='responseCodes'>
            /// </param>
            /// <param name='bIN'>
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='merchantTransactionID'>
            /// </param>
            /// <param name='product'>
            /// </param>
            /// <param name='exchangeCurrencies'>
            /// </param>
            /// <param name='emailAddress'>
            /// </param>
            /// <param name='paymentMethods'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FilterOption>> GetRiskDetailOptionsAsync(this IHubTransactionsClient operations, IList<string> transactionTypes = default(IList<string>), IList<string> currencies = default(IList<string>), IList<string> responseCodes = default(IList<string>), string bIN = default(string), IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), string merchantTransactionID = default(string), string product = default(string), IList<string> exchangeCurrencies = default(IList<string>), string emailAddress = default(string), IList<string> paymentMethods = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRiskDetailOptionsWithHttpMessagesAsync(transactionTypes, currencies, responseCodes, bIN, globalIds, bankIds, corporateIds, merchantIds, merchantTransactionID, product, exchangeCurrencies, emailAddress, paymentMethods, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            public static PagedResultRiskSummaryRow GetRiskSummary(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?))
            {
                return operations.GetRiskSummaryAsync(globalIds, bankIds, corporateIds, merchantIds, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResultRiskSummaryRow> GetRiskSummaryAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRiskSummaryWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            public static IList<FilterOption> GetRiskSummaryOptions(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string))
            {
                return operations.GetRiskSummaryOptionsAsync(globalIds, bankIds, corporateIds, merchantIds, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FilterOption>> GetRiskSummaryOptionsAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRiskSummaryOptionsWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='iDs'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            public static PagedResultShippingServiceDetailsRow GetShippingServiceDetails(this IHubTransactionsClient operations, IList<int?> iDs = default(IList<int?>), int? pageSize = default(int?), int? page = default(int?))
            {
                return operations.GetShippingServiceDetailsAsync(iDs, pageSize, page).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='iDs'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResultShippingServiceDetailsRow> GetShippingServiceDetailsAsync(this IHubTransactionsClient operations, IList<int?> iDs = default(IList<int?>), int? pageSize = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetShippingServiceDetailsWithHttpMessagesAsync(iDs, pageSize, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            public static IList<StatementDataRow> GetStatementData(this IHubTransactionsClient operations, int? id = default(int?), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?))
            {
                return operations.GetStatementDataAsync(id, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<StatementDataRow>> GetStatementDataAsync(this IHubTransactionsClient operations, int? id = default(int?), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStatementDataWithHttpMessagesAsync(id, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            public static IList<FilterOption> GetStatementDataOptions(this IHubTransactionsClient operations, int? id = default(int?), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string))
            {
                return operations.GetStatementDataOptionsAsync(id, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FilterOption>> GetStatementDataOptionsAsync(this IHubTransactionsClient operations, int? id = default(int?), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStatementDataOptionsWithHttpMessagesAsync(id, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='type'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            public static IList<StatementListRow> GetStatementList(this IHubTransactionsClient operations, string key = default(string), string type = default(string), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?))
            {
                return operations.GetStatementListAsync(key, type, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='type'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<StatementListRow>> GetStatementListAsync(this IHubTransactionsClient operations, string key = default(string), string type = default(string), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStatementListWithHttpMessagesAsync(key, type, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='type'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            public static IList<FilterOption> GetStatementListOptions(this IHubTransactionsClient operations, string key = default(string), string type = default(string), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string))
            {
                return operations.GetStatementListOptionsAsync(key, type, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='type'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FilterOption>> GetStatementListOptionsAsync(this IHubTransactionsClient operations, string key = default(string), string type = default(string), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStatementListOptionsWithHttpMessagesAsync(key, type, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='iDs'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            public static PagedResultThreeDSecureDetailsRow GetThreeDSecureDetails(this IHubTransactionsClient operations, IList<int?> iDs = default(IList<int?>), int? pageSize = default(int?), int? page = default(int?))
            {
                return operations.GetThreeDSecureDetailsAsync(iDs, pageSize, page).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='iDs'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResultThreeDSecureDetailsRow> GetThreeDSecureDetailsAsync(this IHubTransactionsClient operations, IList<int?> iDs = default(IList<int?>), int? pageSize = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetThreeDSecureDetailsWithHttpMessagesAsync(iDs, pageSize, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='mID'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            public static PagedResultTop3MerchantsByTypeRow GetTop3MerchantsByType(this IHubTransactionsClient operations, string mID = default(string), int? pageSize = default(int?), int? page = default(int?))
            {
                return operations.GetTop3MerchantsByTypeAsync(mID, pageSize, page).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='mID'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResultTop3MerchantsByTypeRow> GetTop3MerchantsByTypeAsync(this IHubTransactionsClient operations, string mID = default(string), int? pageSize = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTop3MerchantsByTypeWithHttpMessagesAsync(mID, pageSize, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='mID'>
            /// </param>
            /// <param name='country'>
            /// </param>
            /// <param name='paymentMethod'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            public static PagedResultTransactionByCountrySummaryRow GetTransactionByCountrySummary(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), string mID = default(string), string country = default(string), string paymentMethod = default(string), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?))
            {
                return operations.GetTransactionByCountrySummaryAsync(globalIds, bankIds, corporateIds, mID, country, paymentMethod, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='mID'>
            /// </param>
            /// <param name='country'>
            /// </param>
            /// <param name='paymentMethod'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResultTransactionByCountrySummaryRow> GetTransactionByCountrySummaryAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), string mID = default(string), string country = default(string), string paymentMethod = default(string), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTransactionByCountrySummaryWithHttpMessagesAsync(globalIds, bankIds, corporateIds, mID, country, paymentMethod, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='mID'>
            /// </param>
            /// <param name='country'>
            /// </param>
            /// <param name='paymentMethod'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            public static IList<FilterOption> GetTransactionByCountrySummaryOptions(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), string mID = default(string), string country = default(string), string paymentMethod = default(string), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string))
            {
                return operations.GetTransactionByCountrySummaryOptionsAsync(globalIds, bankIds, corporateIds, mID, country, paymentMethod, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='mID'>
            /// </param>
            /// <param name='country'>
            /// </param>
            /// <param name='paymentMethod'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FilterOption>> GetTransactionByCountrySummaryOptionsAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), string mID = default(string), string country = default(string), string paymentMethod = default(string), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTransactionByCountrySummaryOptionsWithHttpMessagesAsync(globalIds, bankIds, corporateIds, mID, country, paymentMethod, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='transactionTypes'>
            /// </param>
            /// <param name='responseCodes'>
            /// </param>
            /// <param name='merchantTransactionID'>
            /// </param>
            /// <param name='product'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            public static PagedResultTransactionBySettlementDateRow GetTransactionBySettlementDate(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> currencies = default(IList<string>), IList<string> transactionTypes = default(IList<string>), IList<string> responseCodes = default(IList<string>), string merchantTransactionID = default(string), string product = default(string), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?))
            {
                return operations.GetTransactionBySettlementDateAsync(globalIds, bankIds, corporateIds, merchantIds, currencies, transactionTypes, responseCodes, merchantTransactionID, product, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='transactionTypes'>
            /// </param>
            /// <param name='responseCodes'>
            /// </param>
            /// <param name='merchantTransactionID'>
            /// </param>
            /// <param name='product'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResultTransactionBySettlementDateRow> GetTransactionBySettlementDateAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> currencies = default(IList<string>), IList<string> transactionTypes = default(IList<string>), IList<string> responseCodes = default(IList<string>), string merchantTransactionID = default(string), string product = default(string), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTransactionBySettlementDateWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, currencies, transactionTypes, responseCodes, merchantTransactionID, product, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='transactionTypes'>
            /// </param>
            /// <param name='responseCodes'>
            /// </param>
            /// <param name='merchantTransactionID'>
            /// </param>
            /// <param name='product'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            public static IList<FilterOption> GetTransactionBySettlementDateOptions(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> currencies = default(IList<string>), IList<string> transactionTypes = default(IList<string>), IList<string> responseCodes = default(IList<string>), string merchantTransactionID = default(string), string product = default(string), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string))
            {
                return operations.GetTransactionBySettlementDateOptionsAsync(globalIds, bankIds, corporateIds, merchantIds, currencies, transactionTypes, responseCodes, merchantTransactionID, product, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='transactionTypes'>
            /// </param>
            /// <param name='responseCodes'>
            /// </param>
            /// <param name='merchantTransactionID'>
            /// </param>
            /// <param name='product'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FilterOption>> GetTransactionBySettlementDateOptionsAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> currencies = default(IList<string>), IList<string> transactionTypes = default(IList<string>), IList<string> responseCodes = default(IList<string>), string merchantTransactionID = default(string), string product = default(string), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTransactionBySettlementDateOptionsWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, currencies, transactionTypes, responseCodes, merchantTransactionID, product, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            public static PagedResultTransactionBySettlementSummaryRow GetTransactionBySettlementSummary(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> currencies = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?))
            {
                return operations.GetTransactionBySettlementSummaryAsync(globalIds, bankIds, corporateIds, merchantIds, currencies, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResultTransactionBySettlementSummaryRow> GetTransactionBySettlementSummaryAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> currencies = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTransactionBySettlementSummaryWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, currencies, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            public static IList<FilterOption> GetTransactionBySettlementSummaryOptions(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> currencies = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string))
            {
                return operations.GetTransactionBySettlementSummaryOptionsAsync(globalIds, bankIds, corporateIds, merchantIds, currencies, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FilterOption>> GetTransactionBySettlementSummaryOptionsAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> currencies = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTransactionBySettlementSummaryOptionsWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, currencies, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='mID'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            public static PagedResultTransactionChartRow GetTransactionChart(this IHubTransactionsClient operations, string mID = default(string), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?))
            {
                return operations.GetTransactionChartAsync(mID, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='mID'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResultTransactionChartRow> GetTransactionChartAsync(this IHubTransactionsClient operations, string mID = default(string), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTransactionChartWithHttpMessagesAsync(mID, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            public static IList<TransactionDetailsRow> GetTransactionDetails(this IHubTransactionsClient operations, int? id = default(int?), double? timeZoneOffset = default(double?))
            {
                return operations.GetTransactionDetailsAsync(id, timeZoneOffset).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TransactionDetailsRow>> GetTransactionDetailsAsync(this IHubTransactionsClient operations, int? id = default(int?), double? timeZoneOffset = default(double?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTransactionDetailsWithHttpMessagesAsync(id, timeZoneOffset, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='iDs'>
            /// </param>
            public static IList<TransactionManagementResultsRow> GetTransactionManagementResults(this IHubTransactionsClient operations, IList<int?> iDs = default(IList<int?>))
            {
                return operations.GetTransactionManagementResultsAsync(iDs).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='iDs'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TransactionManagementResultsRow>> GetTransactionManagementResultsAsync(this IHubTransactionsClient operations, IList<int?> iDs = default(IList<int?>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTransactionManagementResultsWithHttpMessagesAsync(iDs, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transactionTypes'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='amountFrom'>
            /// </param>
            /// <param name='amountTo'>
            /// </param>
            /// <param name='accountHolder'>
            /// </param>
            /// <param name='responseCodes'>
            /// </param>
            /// <param name='bIN'>
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='aPIIDs'>
            /// </param>
            /// <param name='merchantTransactionID'>
            /// </param>
            /// <param name='providerTransactionNumber'>
            /// </param>
            /// <param name='providerResponseCodes'>
            /// </param>
            /// <param name='preApprovalStatus'>
            /// </param>
            /// <param name='exchangeCurrencies'>
            /// </param>
            /// <param name='emailAddress'>
            /// </param>
            /// <param name='paymentMethods'>
            /// </param>
            /// <param name='settlementDateFrom'>
            /// </param>
            /// <param name='settlementDateTo'>
            /// </param>
            /// <param name='transactionSources'>
            /// </param>
            /// <param name='cardLastFourDigits'>
            /// </param>
            /// <param name='cardTypes'>
            /// </param>
            /// <param name='userID'>
            /// </param>
            /// <param name='uIUserID'>
            /// </param>
            /// <param name='bankMerchantID'>
            /// </param>
            /// <param name='token'>
            /// </param>
            /// <param name='iPAddress'>
            /// </param>
            /// <param name='terminalID'>
            /// </param>
            /// <param name='paymentID'>
            /// </param>
            /// <param name='bankAuthID'>
            /// </param>
            /// <param name='acquirer'>
            /// </param>
            /// <param name='originalSettlementDateFrom'>
            /// </param>
            /// <param name='originalSettlementDateTo'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            public static PagedResultTransactionsRow GetTransactions(this IHubTransactionsClient operations, IList<string> transactionTypes = default(IList<string>), IList<string> currencies = default(IList<string>), double? amountFrom = default(double?), double? amountTo = default(double?), string accountHolder = default(string), IList<string> responseCodes = default(IList<string>), string bIN = default(string), IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> aPIIDs = default(IList<string>), string merchantTransactionID = default(string), string providerTransactionNumber = default(string), IList<string> providerResponseCodes = default(IList<string>), string preApprovalStatus = default(string), IList<string> exchangeCurrencies = default(IList<string>), string emailAddress = default(string), IList<string> paymentMethods = default(IList<string>), System.DateTime? settlementDateFrom = default(System.DateTime?), System.DateTime? settlementDateTo = default(System.DateTime?), IList<string> transactionSources = default(IList<string>), string cardLastFourDigits = default(string), IList<string> cardTypes = default(IList<string>), string userID = default(string), string uIUserID = default(string), string bankMerchantID = default(string), string token = default(string), string iPAddress = default(string), string terminalID = default(string), string paymentID = default(string), string bankAuthID = default(string), string acquirer = default(string), System.DateTime? originalSettlementDateFrom = default(System.DateTime?), System.DateTime? originalSettlementDateTo = default(System.DateTime?), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?))
            {
                return operations.GetTransactionsAsync(transactionTypes, currencies, amountFrom, amountTo, accountHolder, responseCodes, bIN, globalIds, bankIds, corporateIds, merchantIds, aPIIDs, merchantTransactionID, providerTransactionNumber, providerResponseCodes, preApprovalStatus, exchangeCurrencies, emailAddress, paymentMethods, settlementDateFrom, settlementDateTo, transactionSources, cardLastFourDigits, cardTypes, userID, uIUserID, bankMerchantID, token, iPAddress, terminalID, paymentID, bankAuthID, acquirer, originalSettlementDateFrom, originalSettlementDateTo, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transactionTypes'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='amountFrom'>
            /// </param>
            /// <param name='amountTo'>
            /// </param>
            /// <param name='accountHolder'>
            /// </param>
            /// <param name='responseCodes'>
            /// </param>
            /// <param name='bIN'>
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='aPIIDs'>
            /// </param>
            /// <param name='merchantTransactionID'>
            /// </param>
            /// <param name='providerTransactionNumber'>
            /// </param>
            /// <param name='providerResponseCodes'>
            /// </param>
            /// <param name='preApprovalStatus'>
            /// </param>
            /// <param name='exchangeCurrencies'>
            /// </param>
            /// <param name='emailAddress'>
            /// </param>
            /// <param name='paymentMethods'>
            /// </param>
            /// <param name='settlementDateFrom'>
            /// </param>
            /// <param name='settlementDateTo'>
            /// </param>
            /// <param name='transactionSources'>
            /// </param>
            /// <param name='cardLastFourDigits'>
            /// </param>
            /// <param name='cardTypes'>
            /// </param>
            /// <param name='userID'>
            /// </param>
            /// <param name='uIUserID'>
            /// </param>
            /// <param name='bankMerchantID'>
            /// </param>
            /// <param name='token'>
            /// </param>
            /// <param name='iPAddress'>
            /// </param>
            /// <param name='terminalID'>
            /// </param>
            /// <param name='paymentID'>
            /// </param>
            /// <param name='bankAuthID'>
            /// </param>
            /// <param name='acquirer'>
            /// </param>
            /// <param name='originalSettlementDateFrom'>
            /// </param>
            /// <param name='originalSettlementDateTo'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResultTransactionsRow> GetTransactionsAsync(this IHubTransactionsClient operations, IList<string> transactionTypes = default(IList<string>), IList<string> currencies = default(IList<string>), double? amountFrom = default(double?), double? amountTo = default(double?), string accountHolder = default(string), IList<string> responseCodes = default(IList<string>), string bIN = default(string), IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> aPIIDs = default(IList<string>), string merchantTransactionID = default(string), string providerTransactionNumber = default(string), IList<string> providerResponseCodes = default(IList<string>), string preApprovalStatus = default(string), IList<string> exchangeCurrencies = default(IList<string>), string emailAddress = default(string), IList<string> paymentMethods = default(IList<string>), System.DateTime? settlementDateFrom = default(System.DateTime?), System.DateTime? settlementDateTo = default(System.DateTime?), IList<string> transactionSources = default(IList<string>), string cardLastFourDigits = default(string), IList<string> cardTypes = default(IList<string>), string userID = default(string), string uIUserID = default(string), string bankMerchantID = default(string), string token = default(string), string iPAddress = default(string), string terminalID = default(string), string paymentID = default(string), string bankAuthID = default(string), string acquirer = default(string), System.DateTime? originalSettlementDateFrom = default(System.DateTime?), System.DateTime? originalSettlementDateTo = default(System.DateTime?), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTransactionsWithHttpMessagesAsync(transactionTypes, currencies, amountFrom, amountTo, accountHolder, responseCodes, bIN, globalIds, bankIds, corporateIds, merchantIds, aPIIDs, merchantTransactionID, providerTransactionNumber, providerResponseCodes, preApprovalStatus, exchangeCurrencies, emailAddress, paymentMethods, settlementDateFrom, settlementDateTo, transactionSources, cardLastFourDigits, cardTypes, userID, uIUserID, bankMerchantID, token, iPAddress, terminalID, paymentID, bankAuthID, acquirer, originalSettlementDateFrom, originalSettlementDateTo, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transactionTypes'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='amountFrom'>
            /// </param>
            /// <param name='amountTo'>
            /// </param>
            /// <param name='accountHolder'>
            /// </param>
            /// <param name='responseCodes'>
            /// </param>
            /// <param name='bIN'>
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='aPIIDs'>
            /// </param>
            /// <param name='merchantTransactionID'>
            /// </param>
            /// <param name='providerTransactionNumber'>
            /// </param>
            /// <param name='providerResponseCodes'>
            /// </param>
            /// <param name='preApprovalStatus'>
            /// </param>
            /// <param name='exchangeCurrencies'>
            /// </param>
            /// <param name='emailAddress'>
            /// </param>
            /// <param name='paymentMethods'>
            /// </param>
            /// <param name='settlementDateFrom'>
            /// </param>
            /// <param name='settlementDateTo'>
            /// </param>
            /// <param name='transactionSources'>
            /// </param>
            /// <param name='cardLastFourDigits'>
            /// </param>
            /// <param name='cardTypes'>
            /// </param>
            /// <param name='userID'>
            /// </param>
            /// <param name='uIUserID'>
            /// </param>
            /// <param name='bankMerchantID'>
            /// </param>
            /// <param name='token'>
            /// </param>
            /// <param name='iPAddress'>
            /// </param>
            /// <param name='terminalID'>
            /// </param>
            /// <param name='paymentID'>
            /// </param>
            /// <param name='bankAuthID'>
            /// </param>
            /// <param name='acquirer'>
            /// </param>
            /// <param name='originalSettlementDateFrom'>
            /// </param>
            /// <param name='originalSettlementDateTo'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            public static IList<FilterOption> GetTransactionsOptions(this IHubTransactionsClient operations, IList<string> transactionTypes = default(IList<string>), IList<string> currencies = default(IList<string>), double? amountFrom = default(double?), double? amountTo = default(double?), string accountHolder = default(string), IList<string> responseCodes = default(IList<string>), string bIN = default(string), IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> aPIIDs = default(IList<string>), string merchantTransactionID = default(string), string providerTransactionNumber = default(string), IList<string> providerResponseCodes = default(IList<string>), string preApprovalStatus = default(string), IList<string> exchangeCurrencies = default(IList<string>), string emailAddress = default(string), IList<string> paymentMethods = default(IList<string>), System.DateTime? settlementDateFrom = default(System.DateTime?), System.DateTime? settlementDateTo = default(System.DateTime?), IList<string> transactionSources = default(IList<string>), string cardLastFourDigits = default(string), IList<string> cardTypes = default(IList<string>), string userID = default(string), string uIUserID = default(string), string bankMerchantID = default(string), string token = default(string), string iPAddress = default(string), string terminalID = default(string), string paymentID = default(string), string bankAuthID = default(string), string acquirer = default(string), System.DateTime? originalSettlementDateFrom = default(System.DateTime?), System.DateTime? originalSettlementDateTo = default(System.DateTime?), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string))
            {
                return operations.GetTransactionsOptionsAsync(transactionTypes, currencies, amountFrom, amountTo, accountHolder, responseCodes, bIN, globalIds, bankIds, corporateIds, merchantIds, aPIIDs, merchantTransactionID, providerTransactionNumber, providerResponseCodes, preApprovalStatus, exchangeCurrencies, emailAddress, paymentMethods, settlementDateFrom, settlementDateTo, transactionSources, cardLastFourDigits, cardTypes, userID, uIUserID, bankMerchantID, token, iPAddress, terminalID, paymentID, bankAuthID, acquirer, originalSettlementDateFrom, originalSettlementDateTo, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transactionTypes'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='amountFrom'>
            /// </param>
            /// <param name='amountTo'>
            /// </param>
            /// <param name='accountHolder'>
            /// </param>
            /// <param name='responseCodes'>
            /// </param>
            /// <param name='bIN'>
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='aPIIDs'>
            /// </param>
            /// <param name='merchantTransactionID'>
            /// </param>
            /// <param name='providerTransactionNumber'>
            /// </param>
            /// <param name='providerResponseCodes'>
            /// </param>
            /// <param name='preApprovalStatus'>
            /// </param>
            /// <param name='exchangeCurrencies'>
            /// </param>
            /// <param name='emailAddress'>
            /// </param>
            /// <param name='paymentMethods'>
            /// </param>
            /// <param name='settlementDateFrom'>
            /// </param>
            /// <param name='settlementDateTo'>
            /// </param>
            /// <param name='transactionSources'>
            /// </param>
            /// <param name='cardLastFourDigits'>
            /// </param>
            /// <param name='cardTypes'>
            /// </param>
            /// <param name='userID'>
            /// </param>
            /// <param name='uIUserID'>
            /// </param>
            /// <param name='bankMerchantID'>
            /// </param>
            /// <param name='token'>
            /// </param>
            /// <param name='iPAddress'>
            /// </param>
            /// <param name='terminalID'>
            /// </param>
            /// <param name='paymentID'>
            /// </param>
            /// <param name='bankAuthID'>
            /// </param>
            /// <param name='acquirer'>
            /// </param>
            /// <param name='originalSettlementDateFrom'>
            /// </param>
            /// <param name='originalSettlementDateTo'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FilterOption>> GetTransactionsOptionsAsync(this IHubTransactionsClient operations, IList<string> transactionTypes = default(IList<string>), IList<string> currencies = default(IList<string>), double? amountFrom = default(double?), double? amountTo = default(double?), string accountHolder = default(string), IList<string> responseCodes = default(IList<string>), string bIN = default(string), IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> aPIIDs = default(IList<string>), string merchantTransactionID = default(string), string providerTransactionNumber = default(string), IList<string> providerResponseCodes = default(IList<string>), string preApprovalStatus = default(string), IList<string> exchangeCurrencies = default(IList<string>), string emailAddress = default(string), IList<string> paymentMethods = default(IList<string>), System.DateTime? settlementDateFrom = default(System.DateTime?), System.DateTime? settlementDateTo = default(System.DateTime?), IList<string> transactionSources = default(IList<string>), string cardLastFourDigits = default(string), IList<string> cardTypes = default(IList<string>), string userID = default(string), string uIUserID = default(string), string bankMerchantID = default(string), string token = default(string), string iPAddress = default(string), string terminalID = default(string), string paymentID = default(string), string bankAuthID = default(string), string acquirer = default(string), System.DateTime? originalSettlementDateFrom = default(System.DateTime?), System.DateTime? originalSettlementDateTo = default(System.DateTime?), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTransactionsOptionsWithHttpMessagesAsync(transactionTypes, currencies, amountFrom, amountTo, accountHolder, responseCodes, bIN, globalIds, bankIds, corporateIds, merchantIds, aPIIDs, merchantTransactionID, providerTransactionNumber, providerResponseCodes, preApprovalStatus, exchangeCurrencies, emailAddress, paymentMethods, settlementDateFrom, settlementDateTo, transactionSources, cardLastFourDigits, cardTypes, userID, uIUserID, bankMerchantID, token, iPAddress, terminalID, paymentID, bankAuthID, acquirer, originalSettlementDateFrom, originalSettlementDateTo, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='merchantTransactionID'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='exchangeCurrencies'>
            /// </param>
            /// <param name='aPIIds'>
            /// </param>
            /// <param name='bIN'>
            /// </param>
            /// <param name='transactionTypes'>
            /// </param>
            /// <param name='responseCodes'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            public static PagedResultTransactionsEligibleForCancelRow GetTransactionsEligibleForCancel(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), string merchantTransactionID = default(string), IList<string> currencies = default(IList<string>), IList<string> exchangeCurrencies = default(IList<string>), IList<string> aPIIds = default(IList<string>), string bIN = default(string), IList<string> transactionTypes = default(IList<string>), IList<string> responseCodes = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?))
            {
                return operations.GetTransactionsEligibleForCancelAsync(globalIds, bankIds, corporateIds, merchantIds, merchantTransactionID, currencies, exchangeCurrencies, aPIIds, bIN, transactionTypes, responseCodes, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='merchantTransactionID'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='exchangeCurrencies'>
            /// </param>
            /// <param name='aPIIds'>
            /// </param>
            /// <param name='bIN'>
            /// </param>
            /// <param name='transactionTypes'>
            /// </param>
            /// <param name='responseCodes'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResultTransactionsEligibleForCancelRow> GetTransactionsEligibleForCancelAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), string merchantTransactionID = default(string), IList<string> currencies = default(IList<string>), IList<string> exchangeCurrencies = default(IList<string>), IList<string> aPIIds = default(IList<string>), string bIN = default(string), IList<string> transactionTypes = default(IList<string>), IList<string> responseCodes = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTransactionsEligibleForCancelWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, merchantTransactionID, currencies, exchangeCurrencies, aPIIds, bIN, transactionTypes, responseCodes, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='merchantTransactionID'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='exchangeCurrencies'>
            /// </param>
            /// <param name='aPIIds'>
            /// </param>
            /// <param name='bIN'>
            /// </param>
            /// <param name='transactionTypes'>
            /// </param>
            /// <param name='responseCodes'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            public static IList<FilterOption> GetTransactionsEligibleForCancelOptions(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), string merchantTransactionID = default(string), IList<string> currencies = default(IList<string>), IList<string> exchangeCurrencies = default(IList<string>), IList<string> aPIIds = default(IList<string>), string bIN = default(string), IList<string> transactionTypes = default(IList<string>), IList<string> responseCodes = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string))
            {
                return operations.GetTransactionsEligibleForCancelOptionsAsync(globalIds, bankIds, corporateIds, merchantIds, merchantTransactionID, currencies, exchangeCurrencies, aPIIds, bIN, transactionTypes, responseCodes, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='merchantTransactionID'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='exchangeCurrencies'>
            /// </param>
            /// <param name='aPIIds'>
            /// </param>
            /// <param name='bIN'>
            /// </param>
            /// <param name='transactionTypes'>
            /// </param>
            /// <param name='responseCodes'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FilterOption>> GetTransactionsEligibleForCancelOptionsAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), string merchantTransactionID = default(string), IList<string> currencies = default(IList<string>), IList<string> exchangeCurrencies = default(IList<string>), IList<string> aPIIds = default(IList<string>), string bIN = default(string), IList<string> transactionTypes = default(IList<string>), IList<string> responseCodes = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTransactionsEligibleForCancelOptionsWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, merchantTransactionID, currencies, exchangeCurrencies, aPIIds, bIN, transactionTypes, responseCodes, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='merchantTransactionID'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='exchangeCurrencies'>
            /// </param>
            /// <param name='aPIIds'>
            /// </param>
            /// <param name='bIN'>
            /// </param>
            /// <param name='transactionTypes'>
            /// </param>
            /// <param name='responseCodes'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            public static PagedResultTransactionsEligibleForCaptureRow GetTransactionsEligibleForCapture(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), string merchantTransactionID = default(string), IList<string> currencies = default(IList<string>), IList<string> exchangeCurrencies = default(IList<string>), IList<string> aPIIds = default(IList<string>), string bIN = default(string), IList<string> transactionTypes = default(IList<string>), IList<string> responseCodes = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?))
            {
                return operations.GetTransactionsEligibleForCaptureAsync(globalIds, bankIds, corporateIds, merchantIds, merchantTransactionID, currencies, exchangeCurrencies, aPIIds, bIN, transactionTypes, responseCodes, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='merchantTransactionID'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='exchangeCurrencies'>
            /// </param>
            /// <param name='aPIIds'>
            /// </param>
            /// <param name='bIN'>
            /// </param>
            /// <param name='transactionTypes'>
            /// </param>
            /// <param name='responseCodes'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResultTransactionsEligibleForCaptureRow> GetTransactionsEligibleForCaptureAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), string merchantTransactionID = default(string), IList<string> currencies = default(IList<string>), IList<string> exchangeCurrencies = default(IList<string>), IList<string> aPIIds = default(IList<string>), string bIN = default(string), IList<string> transactionTypes = default(IList<string>), IList<string> responseCodes = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTransactionsEligibleForCaptureWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, merchantTransactionID, currencies, exchangeCurrencies, aPIIds, bIN, transactionTypes, responseCodes, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='merchantTransactionID'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='exchangeCurrencies'>
            /// </param>
            /// <param name='aPIIds'>
            /// </param>
            /// <param name='bIN'>
            /// </param>
            /// <param name='transactionTypes'>
            /// </param>
            /// <param name='responseCodes'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            public static IList<FilterOption> GetTransactionsEligibleForCaptureOptions(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), string merchantTransactionID = default(string), IList<string> currencies = default(IList<string>), IList<string> exchangeCurrencies = default(IList<string>), IList<string> aPIIds = default(IList<string>), string bIN = default(string), IList<string> transactionTypes = default(IList<string>), IList<string> responseCodes = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string))
            {
                return operations.GetTransactionsEligibleForCaptureOptionsAsync(globalIds, bankIds, corporateIds, merchantIds, merchantTransactionID, currencies, exchangeCurrencies, aPIIds, bIN, transactionTypes, responseCodes, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='merchantTransactionID'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='exchangeCurrencies'>
            /// </param>
            /// <param name='aPIIds'>
            /// </param>
            /// <param name='bIN'>
            /// </param>
            /// <param name='transactionTypes'>
            /// </param>
            /// <param name='responseCodes'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FilterOption>> GetTransactionsEligibleForCaptureOptionsAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), string merchantTransactionID = default(string), IList<string> currencies = default(IList<string>), IList<string> exchangeCurrencies = default(IList<string>), IList<string> aPIIds = default(IList<string>), string bIN = default(string), IList<string> transactionTypes = default(IList<string>), IList<string> responseCodes = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTransactionsEligibleForCaptureOptionsWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, merchantTransactionID, currencies, exchangeCurrencies, aPIIds, bIN, transactionTypes, responseCodes, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='merchantTransactionID'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='exchangeCurrencies'>
            /// </param>
            /// <param name='aPIIds'>
            /// </param>
            /// <param name='bIN'>
            /// </param>
            /// <param name='transactionTypes'>
            /// </param>
            /// <param name='responseCodes'>
            /// </param>
            /// <param name='loginUser'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            public static PagedResultTransactionsEligibleForRefundRow GetTransactionsEligibleForRefund(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), string merchantTransactionID = default(string), IList<string> currencies = default(IList<string>), IList<string> exchangeCurrencies = default(IList<string>), IList<string> aPIIds = default(IList<string>), string bIN = default(string), IList<string> transactionTypes = default(IList<string>), IList<string> responseCodes = default(IList<string>), string loginUser = default(string), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?))
            {
                return operations.GetTransactionsEligibleForRefundAsync(globalIds, bankIds, corporateIds, merchantIds, merchantTransactionID, currencies, exchangeCurrencies, aPIIds, bIN, transactionTypes, responseCodes, loginUser, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='merchantTransactionID'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='exchangeCurrencies'>
            /// </param>
            /// <param name='aPIIds'>
            /// </param>
            /// <param name='bIN'>
            /// </param>
            /// <param name='transactionTypes'>
            /// </param>
            /// <param name='responseCodes'>
            /// </param>
            /// <param name='loginUser'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResultTransactionsEligibleForRefundRow> GetTransactionsEligibleForRefundAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), string merchantTransactionID = default(string), IList<string> currencies = default(IList<string>), IList<string> exchangeCurrencies = default(IList<string>), IList<string> aPIIds = default(IList<string>), string bIN = default(string), IList<string> transactionTypes = default(IList<string>), IList<string> responseCodes = default(IList<string>), string loginUser = default(string), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTransactionsEligibleForRefundWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, merchantTransactionID, currencies, exchangeCurrencies, aPIIds, bIN, transactionTypes, responseCodes, loginUser, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='merchantTransactionID'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='exchangeCurrencies'>
            /// </param>
            /// <param name='aPIIds'>
            /// </param>
            /// <param name='bIN'>
            /// </param>
            /// <param name='transactionTypes'>
            /// </param>
            /// <param name='responseCodes'>
            /// </param>
            /// <param name='loginUser'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            public static IList<FilterOption> GetTransactionsEligibleForRefundOptions(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), string merchantTransactionID = default(string), IList<string> currencies = default(IList<string>), IList<string> exchangeCurrencies = default(IList<string>), IList<string> aPIIds = default(IList<string>), string bIN = default(string), IList<string> transactionTypes = default(IList<string>), IList<string> responseCodes = default(IList<string>), string loginUser = default(string), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string))
            {
                return operations.GetTransactionsEligibleForRefundOptionsAsync(globalIds, bankIds, corporateIds, merchantIds, merchantTransactionID, currencies, exchangeCurrencies, aPIIds, bIN, transactionTypes, responseCodes, loginUser, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='merchantTransactionID'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='exchangeCurrencies'>
            /// </param>
            /// <param name='aPIIds'>
            /// </param>
            /// <param name='bIN'>
            /// </param>
            /// <param name='transactionTypes'>
            /// </param>
            /// <param name='responseCodes'>
            /// </param>
            /// <param name='loginUser'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FilterOption>> GetTransactionsEligibleForRefundOptionsAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), string merchantTransactionID = default(string), IList<string> currencies = default(IList<string>), IList<string> exchangeCurrencies = default(IList<string>), IList<string> aPIIds = default(IList<string>), string bIN = default(string), IList<string> transactionTypes = default(IList<string>), IList<string> responseCodes = default(IList<string>), string loginUser = default(string), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTransactionsEligibleForRefundOptionsWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, merchantTransactionID, currencies, exchangeCurrencies, aPIIds, bIN, transactionTypes, responseCodes, loginUser, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='merchantTransactionID'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='exchangeCurrencies'>
            /// </param>
            /// <param name='aPIIds'>
            /// </param>
            /// <param name='bIN'>
            /// </param>
            /// <param name='transactionTypes'>
            /// </param>
            /// <param name='responseCodes'>
            /// </param>
            /// <param name='loginUser'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            public static PagedResultTransactionsEligibleForRefundApprovalRow GetTransactionsEligibleForRefundApproval(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), string merchantTransactionID = default(string), IList<string> currencies = default(IList<string>), IList<string> exchangeCurrencies = default(IList<string>), IList<string> aPIIds = default(IList<string>), string bIN = default(string), IList<string> transactionTypes = default(IList<string>), IList<string> responseCodes = default(IList<string>), string loginUser = default(string), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?))
            {
                return operations.GetTransactionsEligibleForRefundApprovalAsync(globalIds, bankIds, corporateIds, merchantIds, merchantTransactionID, currencies, exchangeCurrencies, aPIIds, bIN, transactionTypes, responseCodes, loginUser, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='merchantTransactionID'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='exchangeCurrencies'>
            /// </param>
            /// <param name='aPIIds'>
            /// </param>
            /// <param name='bIN'>
            /// </param>
            /// <param name='transactionTypes'>
            /// </param>
            /// <param name='responseCodes'>
            /// </param>
            /// <param name='loginUser'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResultTransactionsEligibleForRefundApprovalRow> GetTransactionsEligibleForRefundApprovalAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), string merchantTransactionID = default(string), IList<string> currencies = default(IList<string>), IList<string> exchangeCurrencies = default(IList<string>), IList<string> aPIIds = default(IList<string>), string bIN = default(string), IList<string> transactionTypes = default(IList<string>), IList<string> responseCodes = default(IList<string>), string loginUser = default(string), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTransactionsEligibleForRefundApprovalWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, merchantTransactionID, currencies, exchangeCurrencies, aPIIds, bIN, transactionTypes, responseCodes, loginUser, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='merchantTransactionID'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='exchangeCurrencies'>
            /// </param>
            /// <param name='aPIIds'>
            /// </param>
            /// <param name='bIN'>
            /// </param>
            /// <param name='transactionTypes'>
            /// </param>
            /// <param name='responseCodes'>
            /// </param>
            /// <param name='loginUser'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            public static IList<FilterOption> GetTransactionsEligibleForRefundApprovalOptions(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), string merchantTransactionID = default(string), IList<string> currencies = default(IList<string>), IList<string> exchangeCurrencies = default(IList<string>), IList<string> aPIIds = default(IList<string>), string bIN = default(string), IList<string> transactionTypes = default(IList<string>), IList<string> responseCodes = default(IList<string>), string loginUser = default(string), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string))
            {
                return operations.GetTransactionsEligibleForRefundApprovalOptionsAsync(globalIds, bankIds, corporateIds, merchantIds, merchantTransactionID, currencies, exchangeCurrencies, aPIIds, bIN, transactionTypes, responseCodes, loginUser, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='merchantTransactionID'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='exchangeCurrencies'>
            /// </param>
            /// <param name='aPIIds'>
            /// </param>
            /// <param name='bIN'>
            /// </param>
            /// <param name='transactionTypes'>
            /// </param>
            /// <param name='responseCodes'>
            /// </param>
            /// <param name='loginUser'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FilterOption>> GetTransactionsEligibleForRefundApprovalOptionsAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), string merchantTransactionID = default(string), IList<string> currencies = default(IList<string>), IList<string> exchangeCurrencies = default(IList<string>), IList<string> aPIIds = default(IList<string>), string bIN = default(string), IList<string> transactionTypes = default(IList<string>), IList<string> responseCodes = default(IList<string>), string loginUser = default(string), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTransactionsEligibleForRefundApprovalOptionsWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, merchantTransactionID, currencies, exchangeCurrencies, aPIIds, bIN, transactionTypes, responseCodes, loginUser, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='aPIIDs'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            public static PagedResultTransactionSuccessFailRow GetTransactionSuccessFail(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> aPIIDs = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?))
            {
                return operations.GetTransactionSuccessFailAsync(globalIds, bankIds, corporateIds, merchantIds, aPIIDs, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='aPIIDs'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResultTransactionSuccessFailRow> GetTransactionSuccessFailAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> aPIIDs = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTransactionSuccessFailWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, aPIIDs, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='aPIIDs'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            public static IList<FilterOption> GetTransactionSuccessFailOptions(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> aPIIDs = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string))
            {
                return operations.GetTransactionSuccessFailOptionsAsync(globalIds, bankIds, corporateIds, merchantIds, aPIIDs, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='aPIIDs'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FilterOption>> GetTransactionSuccessFailOptionsAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> aPIIDs = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTransactionSuccessFailOptionsWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, aPIIDs, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='aPIIds'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            public static PagedResultTransactionSummaryRow GetTransactionSummary(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> aPIIds = default(IList<string>), IList<string> currencies = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?))
            {
                return operations.GetTransactionSummaryAsync(globalIds, bankIds, corporateIds, merchantIds, aPIIds, currencies, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='aPIIds'>
            /// </param>
            /// <param name='currencies'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResultTransactionSummaryRow> GetTransactionSummaryAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), IList<string> aPIIds = default(IList<string>), IList<string> currencies = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTransactionSummaryWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, aPIIds, currencies, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            public static PagedResultTransactionVolumeRow GetTransactionVolume(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?))
            {
                return operations.GetTransactionVolumeAsync(globalIds, bankIds, corporateIds, merchantIds, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResultTransactionVolumeRow> GetTransactionVolumeAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTransactionVolumeWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='mID'>
            /// </param>
            /// <param name='groupByBankId'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            public static PagedResultUptimePerformanceIndicatorsRow GetUptimePerformanceIndicators(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), string mID = default(string), bool? groupByBankId = default(bool?), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?))
            {
                return operations.GetUptimePerformanceIndicatorsAsync(globalIds, bankIds, corporateIds, merchantIds, mID, groupByBankId, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='mID'>
            /// </param>
            /// <param name='groupByBankId'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResultUptimePerformanceIndicatorsRow> GetUptimePerformanceIndicatorsAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), string mID = default(string), bool? groupByBankId = default(bool?), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUptimePerformanceIndicatorsWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, mID, groupByBankId, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='mID'>
            /// </param>
            /// <param name='groupByBankId'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            public static IList<FilterOption> GetUptimePerformanceIndicatorsOptions(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), string mID = default(string), bool? groupByBankId = default(bool?), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string))
            {
                return operations.GetUptimePerformanceIndicatorsOptionsAsync(globalIds, bankIds, corporateIds, merchantIds, mID, groupByBankId, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='globalIds'>
            /// </param>
            /// <param name='bankIds'>
            /// </param>
            /// <param name='corporateIds'>
            /// </param>
            /// <param name='merchantIds'>
            /// </param>
            /// <param name='mID'>
            /// </param>
            /// <param name='groupByBankId'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='timeZoneOffset'>
            /// </param>
            /// <param name='orderBys'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='optionText'>
            /// </param>
            /// <param name='optionValue'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FilterOption>> GetUptimePerformanceIndicatorsOptionsAsync(this IHubTransactionsClient operations, IList<string> globalIds = default(IList<string>), IList<string> bankIds = default(IList<string>), IList<string> corporateIds = default(IList<string>), IList<string> merchantIds = default(IList<string>), string mID = default(string), bool? groupByBankId = default(bool?), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), double? timeZoneOffset = default(double?), IList<string> orderBys = default(IList<string>), int? pageSize = default(int?), int? page = default(int?), string optionText = default(string), string optionValue = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUptimePerformanceIndicatorsOptionsWithHttpMessagesAsync(globalIds, bankIds, corporateIds, merchantIds, mID, groupByBankId, dateFrom, dateTo, timeZoneOffset, orderBys, pageSize, page, optionText, optionValue, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
